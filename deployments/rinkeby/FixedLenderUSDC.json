{
  "address": "0x69295eaC101184f825EF551E0d500B2AD414adBD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "asset_",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "maxFuturePools_",
          "type": "uint8"
        },
        {
          "internalType": "uint128",
          "name": "accumulatedEarningsSmoothFactor_",
          "type": "uint128"
        },
        {
          "internalType": "contract Auditor",
          "name": "auditor_",
          "type": "address"
        },
        {
          "internalType": "contract InterestRateModel",
          "name": "interestRateModel_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "penaltyRate_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "smartPoolReserveFactor_",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "up",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "down",
              "type": "uint256"
            }
          ],
          "internalType": "struct PoolAccounting.DampSpeed",
          "name": "dampSpeed_",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InsufficientProtocolLiquidity",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidParameter",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaturityOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SmartPoolReserveExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooMuchSlippage",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "state",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "requiredState",
          "type": "uint8"
        }
      ],
      "name": "UnmatchedPoolState",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "state",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "requiredState",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "alternativeState",
          "type": "uint8"
        }
      ],
      "name": "UnmatchedPoolStateMultiple",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroRepay",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroWithdraw",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "newAccumulatedEarningsSmoothFactor",
          "type": "uint128"
        }
      ],
      "name": "AccumulatedEarningsSmoothFactorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "AssetSeized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "BorrowAtMaturity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDampSpeedUp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDampSpeedDown",
          "type": "uint256"
        }
      ],
      "name": "DampSpeedSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "DepositAtMaturity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract InterestRateModel",
          "name": "newInterestRateModel",
          "type": "address"
        }
      ],
      "name": "InterestRateModelSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract FixedLender",
          "name": "collateralFixedLender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seizedAssets",
          "type": "uint256"
        }
      ],
      "name": "LiquidateBorrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxFuturePools",
          "type": "uint256"
        }
      ],
      "name": "MaxFuturePoolsSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPenaltyRate",
          "type": "uint256"
        }
      ],
      "name": "PenaltyRateSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionAssets",
          "type": "uint256"
        }
      ],
      "name": "RepayAtMaturity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousAssets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "earnings",
          "type": "uint256"
        }
      ],
      "name": "SmartPoolEarningsAccrued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSmartPoolReserveFactor",
          "type": "uint256"
        }
      ],
      "name": "SmartPoolReserveFactorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetsDiscounted",
          "type": "uint256"
        }
      ],
      "name": "WithdrawAtMaturity",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CLOSE_FACTOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accumulatedEarningsSmoothFactor",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "auditor",
      "outputs": [
        {
          "internalType": "contract Auditor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxAssetsAllowed",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "borrowAtMaturity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assetsOwed",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "convertToAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "convertToShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dampSpeedDown",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dampSpeedUp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAssetsRequired",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "depositAtMaturity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maturityAssets",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "name": "getAccountBorrows",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "sumPositions",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "sumPenalties",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        }
      ],
      "name": "getAccountSnapshot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestRateModel",
      "outputs": [
        {
          "internalType": "contract InterestRateModel",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastAccumulatedEarningsAccrual",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastAverageUpdate",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "positionAssets",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxAssetsAllowed",
          "type": "uint256"
        },
        {
          "internalType": "contract FixedLender",
          "name": "collateralFixedLender",
          "type": "address"
        }
      ],
      "name": "liquidate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "repaidAssets",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "maturityPools",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "borrowed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "supplied",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "earningsUnassigned",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastAccrual",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxFuturePools",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mpUserBorrowedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "principal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "mpUserSuppliedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "principal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "penaltyRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "positionAssets",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxAssetsAllowed",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "repayAtMaturity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "actualRepayAssets",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "seize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "accumulatedEarningsSmoothFactor_",
          "type": "uint128"
        }
      ],
      "name": "setAccumulatedEarningsSmoothFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "up",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "down",
              "type": "uint256"
            }
          ],
          "internalType": "struct PoolAccounting.DampSpeed",
          "name": "dampSpeed",
          "type": "tuple"
        }
      ],
      "name": "setDampSpeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract InterestRateModel",
          "name": "interestRateModel_",
          "type": "address"
        }
      ],
      "name": "setInterestRateModel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "futurePools",
          "type": "uint8"
        }
      ],
      "name": "setMaxFuturePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "penaltyRate_",
          "type": "uint256"
        }
      ],
      "name": "setPenaltyRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "smartPoolReserveFactor_",
          "type": "uint256"
        }
      ],
      "name": "setSmartPoolReserveFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "smartPoolAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "smartPoolAssetsAverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "smartPoolBorrowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "smartPoolEarningsAccumulator",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "smartPoolReserveFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userMpBorrowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userMpSupplied",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maturity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "positionAssets",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAssetsRequired",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "withdrawAtMaturity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assetsDiscounted",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x40dd796f942f28dd67c0f3aa66059d6073425dc08fca50bff7acbd4277fe8dc8",
  "receipt": {
    "to": null,
    "from": "0xDb90CDB64CfF03f254e4015C4F705C3F3C834400",
    "contractAddress": "0x69295eaC101184f825EF551E0d500B2AD414adBD",
    "transactionIndex": 11,
    "gasUsed": "5330098",
    "logsBloom": "0x
    "blockHash": "0x0a6c10f8e06043051c20892196abbf069ef439882e87459b3c3cd2aaa70afe07",
    "transactionHash": "0x40dd796f942f28dd67c0f3aa66059d6073425dc08fca50bff7acbd4277fe8dc8",
    "logs": [
      {
        "transactionIndex": 11,
        "blockNumber": 10858689,
        "transactionHash": "0x40dd796f942f28dd67c0f3aa66059d6073425dc08fca50bff7acbd4277fe8dc8",
        "address": "0x69295eaC101184f825EF551E0d500B2AD414adBD",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000db90cdb64cff03f254e4015c4f705c3f3c834400",
          "0x000000000000000000000000db90cdb64cff03f254e4015c4f705c3f3c834400"
        ],
        "data": "0x",
        "logIndex": 22,
        "blockHash": "0x0a6c10f8e06043051c20892196abbf069ef439882e87459b3c3cd2aaa70afe07"
      },
      {
        "transactionIndex": 11,
        "blockNumber": 10858689,
        "transactionHash": "0x40dd796f942f28dd67c0f3aa66059d6073425dc08fca50bff7acbd4277fe8dc8",
        "address": "0x69295eaC101184f825EF551E0d500B2AD414adBD",
        "topics": [
          "0x7902cd1307c545e3f5782172612372bf997a93698917ced12b2f83d86e347d0c",
          "0x000000000000000000000000ec00e4a3f1c170e57f0261632c139f8330bafba3"
        ],
        "data": "0x",
        "logIndex": 23,
        "blockHash": "0x0a6c10f8e06043051c20892196abbf069ef439882e87459b3c3cd2aaa70afe07"
      },
      {
        "transactionIndex": 11,
        "blockNumber": 10858689,
        "transactionHash": "0x40dd796f942f28dd67c0f3aa66059d6073425dc08fca50bff7acbd4277fe8dc8",
        "address": "0x69295eaC101184f825EF551E0d500B2AD414adBD",
        "topics": [
          "0xdb0ebfb2503f7c16b45577ebbf6c7d6b99b6e8aaf6652b156e36d5d6654a3a5e"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000035e55f1909",
        "logIndex": 24,
        "blockHash": "0x0a6c10f8e06043051c20892196abbf069ef439882e87459b3c3cd2aaa70afe07"
      },
      {
        "transactionIndex": 11,
        "blockNumber": 10858689,
        "transactionHash": "0x40dd796f942f28dd67c0f3aa66059d6073425dc08fca50bff7acbd4277fe8dc8",
        "address": "0x69295eaC101184f825EF551E0d500B2AD414adBD",
        "topics": [
          "0xc424e64f100ae550a498ed25323459966a5c0b91426b22e1d62d9a5ec7d01e0a"
        ],
        "data": "0x000000000000000000000000000000000000000000000000016345785d8a0000",
        "logIndex": 25,
        "blockHash": "0x0a6c10f8e06043051c20892196abbf069ef439882e87459b3c3cd2aaa70afe07"
      },
      {
        "transactionIndex": 11,
        "blockNumber": 10858689,
        "transactionHash": "0x40dd796f942f28dd67c0f3aa66059d6073425dc08fca50bff7acbd4277fe8dc8",
        "address": "0x69295eaC101184f825EF551E0d500B2AD414adBD",
        "topics": [
          "0xd09fee08a2915f9ac9a77197b21a3e275d34ec9542f569eb15b95ce8f7fe2808"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001057acf5f7800000000000000000000000000000000000000000000000000005d423c655aa0000",
        "logIndex": 26,
        "blockHash": "0x0a6c10f8e06043051c20892196abbf069ef439882e87459b3c3cd2aaa70afe07"
      },
      {
        "transactionIndex": 11,
        "blockNumber": 10858689,
        "transactionHash": "0x40dd796f942f28dd67c0f3aa66059d6073425dc08fca50bff7acbd4277fe8dc8",
        "address": "0x69295eaC101184f825EF551E0d500B2AD414adBD",
        "topics": [
          "0x23c0170203096819aed8a13739fe91ce445ec92a7e2aa228081b5e45ee582c80"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000003",
        "logIndex": 27,
        "blockHash": "0x0a6c10f8e06043051c20892196abbf069ef439882e87459b3c3cd2aaa70afe07"
      },
      {
        "transactionIndex": 11,
        "blockNumber": 10858689,
        "transactionHash": "0x40dd796f942f28dd67c0f3aa66059d6073425dc08fca50bff7acbd4277fe8dc8",
        "address": "0x69295eaC101184f825EF551E0d500B2AD414adBD",
        "topics": [
          "0x23b551d40eff810596d9326aa0c01a3f4e9399def252648a5b47a2cf032443c7"
        ],
        "data": "0x0000000000000000000000000000000000000000000000001bc16d674ec80000",
        "logIndex": 28,
        "blockHash": "0x0a6c10f8e06043051c20892196abbf069ef439882e87459b3c3cd2aaa70afe07"
      }
    ],
    "blockNumber": 10858689,
    "cumulativeGasUsed": "6765678",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xb18d016cDD2d9439A19f15633005A6b2cd6Aa774",
    3,
    "2000000000000000000",
    "0x778c90630f26447FD92719937627981e5582db66",
    "0xeC00E4A3f1c170E57f0261632c139f8330BAfbA3",
    "231481481481",
    "100000000000000000",
    {
      "up": "4600000000000000",
      "down": "420000000000000000"
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "a3edfed24954129c15f7c8541495d815",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"asset_\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"maxFuturePools_\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"accumulatedEarningsSmoothFactor_\",\"type\":\"uint128\"},{\"internalType\":\"contract Auditor\",\"name\":\"auditor_\",\"type\":\"address\"},{\"internalType\":\"contract InterestRateModel\",\"name\":\"interestRateModel_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"penaltyRate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"smartPoolReserveFactor_\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"up\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"down\",\"type\":\"uint256\"}],\"internalType\":\"struct PoolAccounting.DampSpeed\",\"name\":\"dampSpeed_\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InsufficientProtocolLiquidity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParameter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaturityOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SmartPoolReserveExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooMuchSlippage\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"requiredState\",\"type\":\"uint8\"}],\"name\":\"UnmatchedPoolState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"state\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"requiredState\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"alternativeState\",\"type\":\"uint8\"}],\"name\":\"UnmatchedPoolStateMultiple\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroRepay\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroWithdraw\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"newAccumulatedEarningsSmoothFactor\",\"type\":\"uint128\"}],\"name\":\"AccumulatedEarningsSmoothFactorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"AssetSeized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"BorrowAtMaturity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDampSpeedUp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDampSpeedDown\",\"type\":\"uint256\"}],\"name\":\"DampSpeedSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"DepositAtMaturity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract InterestRateModel\",\"name\":\"newInterestRateModel\",\"type\":\"address\"}],\"name\":\"InterestRateModelSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract FixedLender\",\"name\":\"collateralFixedLender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seizedAssets\",\"type\":\"uint256\"}],\"name\":\"LiquidateBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxFuturePools\",\"type\":\"uint256\"}],\"name\":\"MaxFuturePoolsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPenaltyRate\",\"type\":\"uint256\"}],\"name\":\"PenaltyRateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionAssets\",\"type\":\"uint256\"}],\"name\":\"RepayAtMaturity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousAssets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earnings\",\"type\":\"uint256\"}],\"name\":\"SmartPoolEarningsAccrued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSmartPoolReserveFactor\",\"type\":\"uint256\"}],\"name\":\"SmartPoolReserveFactorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetsDiscounted\",\"type\":\"uint256\"}],\"name\":\"WithdrawAtMaturity\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CLOSE_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accumulatedEarningsSmoothFactor\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"auditor\",\"outputs\":[{\"internalType\":\"contract Auditor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAssetsAllowed\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"borrowAtMaturity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assetsOwed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dampSpeedDown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dampSpeedUp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAssetsRequired\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"depositAtMaturity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maturityAssets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"name\":\"getAccountBorrows\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sumPositions\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sumPenalties\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"}],\"name\":\"getAccountSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRateModel\",\"outputs\":[{\"internalType\":\"contract InterestRateModel\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastAccumulatedEarningsAccrual\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastAverageUpdate\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"positionAssets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAssetsAllowed\",\"type\":\"uint256\"},{\"internalType\":\"contract FixedLender\",\"name\":\"collateralFixedLender\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"repaidAssets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"maturityPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplied\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"earningsUnassigned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastAccrual\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxFuturePools\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mpUserBorrowedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mpUserSuppliedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"penaltyRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionAssets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAssetsAllowed\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"repayAtMaturity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"actualRepayAssets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"seize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"accumulatedEarningsSmoothFactor_\",\"type\":\"uint128\"}],\"name\":\"setAccumulatedEarningsSmoothFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"up\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"down\",\"type\":\"uint256\"}],\"internalType\":\"struct PoolAccounting.DampSpeed\",\"name\":\"dampSpeed\",\"type\":\"tuple\"}],\"name\":\"setDampSpeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract InterestRateModel\",\"name\":\"interestRateModel_\",\"type\":\"address\"}],\"name\":\"setInterestRateModel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"futurePools\",\"type\":\"uint8\"}],\"name\":\"setMaxFuturePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"penaltyRate_\",\"type\":\"uint256\"}],\"name\":\"setPenaltyRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"smartPoolReserveFactor_\",\"type\":\"uint256\"}],\"name\":\"setSmartPoolReserveFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smartPoolAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smartPoolAssetsAverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smartPoolBorrowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smartPoolEarningsAccumulator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smartPoolReserveFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userMpBorrowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userMpSupplied\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maturity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"positionAssets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAssetsRequired\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdrawAtMaturity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assetsDiscounted\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AccumulatedEarningsSmoothFactorSet(uint128)\":{\"params\":{\"newAccumulatedEarningsSmoothFactor\":\"factor represented with 1e18 decimals.\"}},\"AssetSeized(address,address,uint256)\":{\"params\":{\"assets\":\"amount seized of the collateral.\",\"borrower\":\"address which had the original debt.\",\"liquidator\":\"address which seized this collateral.\"}},\"BorrowAtMaturity(uint256,address,address,address,uint256,uint256)\":{\"params\":{\"assets\":\"amount of the asset that were borrowed.\",\"borrower\":\"address which will be repaying the borrowed assets.\",\"caller\":\"address which borrowed the asset.\",\"fee\":\"extra amount that will need to be paid at maturity.\",\"maturity\":\"maturity in which the user will have to repay the loan.\",\"receiver\":\"address that received the borrowed assets.\"}},\"DepositAtMaturity(uint256,address,address,uint256,uint256)\":{\"params\":{\"assets\":\"amount of the asset that were deposited.\",\"caller\":\"address which deposited the assets.\",\"fee\":\"is the extra amount that it will be collected at maturity.\",\"maturity\":\"maturity in which the user will be able to collect his deposit + his fee.\",\"owner\":\"address that will be able to withdraw the deposited assets.\"}},\"LiquidateBorrow(address,address,uint256,address,uint256)\":{\"params\":{\"assets\":\"amount of the asset that were repaid.\",\"borrower\":\"address which had the original debt.\",\"collateralFixedLender\":\"address of the asset that were seized by the liquidator.\",\"receiver\":\"address which repaid the previously borrowed amount.\",\"seizedAssets\":\"amount seized of the collateral.\"}},\"MaxFuturePoolsSet(uint256)\":{\"params\":{\"newMaxFuturePools\":\"represented with 0 decimals.\"}},\"RepayAtMaturity(uint256,address,address,uint256,uint256)\":{\"params\":{\"assets\":\"amount that was repaid.\",\"borrower\":\"address which had the original debt.\",\"caller\":\"address which repaid the previously borrowed amount.\",\"maturity\":\"maturity where the user repaid its borrowed amounts.\",\"positionAssets\":\"amount of the debt that was covered in this repayment (penalties could have been repaid).\"}},\"SmartPoolEarningsAccrued(uint256,uint256)\":{\"params\":{\"earnings\":\"new smart pool earnings, denominated in assets (underlying).\",\"previousAssets\":\"previous balance of the smart pool, denominated in assets (underlying).\"}},\"WithdrawAtMaturity(uint256,address,address,address,uint256,uint256)\":{\"params\":{\"assets\":\"amount of the asset that were withdrawn.\",\"assetsDiscounted\":\"amount of the asset that were deposited (in case of early withdrawal).\",\"caller\":\"address which withdraw the asset.\",\"maturity\":\"maturity where the user collected its deposits.\",\"owner\":\"address which had the assets withdrawn.\",\"receiver\":\"address which will be collecting the assets.\"}}},\"kind\":\"dev\",\"methods\":{\"borrowAtMaturity(uint256,uint256,uint256,address,address)\":{\"details\":\"Borrows a certain amount from a maturity date.\",\"params\":{\"assets\":\"amount to send to borrower.\",\"borrower\":\"address that will repay the borrowed assets.\",\"maturity\":\"maturity date for repayment.\",\"maxAssetsAllowed\":\"maximum amount of debt that the user is willing to accept.\",\"receiver\":\"address that will receive the borrowed assets.\"}},\"depositAtMaturity(uint256,uint256,uint256,address)\":{\"params\":{\"assets\":\"amount to receive from the msg.sender.\",\"maturity\":\"maturity date / pool ID.\",\"minAssetsRequired\":\"minimum amount of assets required by the depositor for the transaction to be accepted.\",\"receiver\":\"address that will be able to withdraw the deposited assets.\"},\"returns\":{\"maturityAssets\":\"total amount of assets (principal + fee) to be withdrawn at maturity.\"}},\"getAccountBorrows(address,uint256)\":{\"details\":\"Gets all borrows for an account in certain maturity (or MATURITY_ALL).\",\"params\":{\"maturity\":\"maturity where the borrow is taking place. MATURITY_ALL returns all borrows.\",\"who\":\"account to return status snapshot in the specified maturity date.\"},\"returns\":{\"sumPenalties\":\"the total penalties for late repayment in all maturities.\",\"sumPositions\":\"the total amount of borrows in user position.\"}},\"getAccountSnapshot(address,uint256)\":{\"params\":{\"maturity\":\"maturity. `PoolLib.MATURITY_ALL` (`type(uint256).max`) for all maturities.\",\"who\":\"wallet to return status snapshot in the specified maturity date.\"},\"returns\":{\"_0\":\"the amount the user deposited to the smart pool and the total money he owes from maturities.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"liquidate(address,uint256,uint256,address)\":{\"details\":\"Msg.sender liquidates borrower's position(s) and repays a certain amount of debt for multiple maturities, seizing a part of borrower's collateral.\",\"params\":{\"borrower\":\"wallet that has an outstanding debt across all maturities.\",\"collateralFixedLender\":\"fixedLender from which the collateral will be seized to give the liquidator.\",\"maxAssetsAllowed\":\"maximum amount of debt that the liquidator is willing to accept.\",\"positionAssets\":\"amount of debt to be covered by liquidator(msg.sender).\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"redeem(uint256,address,address)\":{\"details\":\"Makes sure that the owner doesn't have shortfall after withdrawing.\",\"params\":{\"owner\":\"address which owns the smart pool assets.\",\"receiver\":\"address to which the assets will be transferred.\",\"shares\":\"amount of shares to be redeemed for underlying asset.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"repayAtMaturity(uint256,uint256,uint256,address)\":{\"params\":{\"borrower\":\"address of the account that has the debt.\",\"maturity\":\"maturity date where the assets will be repaid.\",\"maxAssetsAllowed\":\"maximum amount of debt that the user is willing to accept to be repaid.\",\"positionAssets\":\"amount to be paid for the borrower's debt.\"},\"returns\":{\"actualRepayAssets\":\"the actual amount that was transferred into the protocol.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"seize(address,address,uint256)\":{\"details\":\"Public function for liquidator to seize borrowers tokens in the smart pool. This function will only be called from another FixedLender, on `liquidation` calls. That's why msg.sender needs to be passed to the private function (to be validated as a market)\",\"params\":{\"assets\":\"amount to be removed from borrower's possession.\",\"borrower\":\"address from which the tokens will be seized.\",\"liquidator\":\"address which will receive the seized tokens.\"}},\"setAccumulatedEarningsSmoothFactor(uint128)\":{\"details\":\"Value can only be lower than 4. If set at 0, then all remaining accumulated earnings are distributed in following operation to the smart pool.\",\"params\":{\"accumulatedEarningsSmoothFactor_\":\"represented with 18 decimals.\"}},\"setDampSpeed((uint256,uint256))\":{\"details\":\"Values can only be set between 0 and 100%.\",\"params\":{\"dampSpeed\":\"represented with 18 decimals.\"}},\"setInterestRateModel(address)\":{\"params\":{\"interestRateModel_\":\"new interest rate model.\"}},\"setMaxFuturePools(uint8)\":{\"details\":\"Value can not be 0 or higher than 224. Value shouldn't be lower than previous value or VALID maturities will become NOT_READY.\",\"params\":{\"futurePools\":\"number of pools to be active at the same time.\"}},\"setPenaltyRate(uint256)\":{\"details\":\"Value can only be set approximately between 5% and 1% daily.\",\"params\":{\"penaltyRate_\":\"percentage represented with 18 decimals.\"}},\"setSmartPoolReserveFactor(uint256)\":{\"details\":\"Value can only be set between 20% and 0%.\",\"params\":{\"smartPoolReserveFactor_\":\"parameter represented with 18 decimals.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalAssets()\":{\"returns\":{\"_0\":\"actual smartPoolAssets plus earnings to be accrued at current timestamp.\"}},\"transfer(address,uint256)\":{\"details\":\"It's expected that this function can't be paused to prevent freezing user funds. Makes sure that the caller doesn't have shortfall after transferring.\",\"params\":{\"shares\":\"amount of tokens.\",\"to\":\"address to which the tokens will be transferred.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"It's expected that this function can't be paused to prevent freezing user funds. Makes sure that `from` address doesn't have shortfall after transferring.\",\"params\":{\"from\":\"address from which the tokens will be transferred.\",\"shares\":\"amount of tokens.\",\"to\":\"address to which the tokens will be transferred.\"}},\"withdraw(uint256,address,address)\":{\"details\":\"Makes sure that the owner doesn't have shortfall after withdrawing.\",\"params\":{\"assets\":\"amount of underlying to be withdrawn.\",\"owner\":\"address which owns the smart pool assets.\",\"receiver\":\"address to which the assets will be transferred.\"}},\"withdrawAtMaturity(uint256,uint256,uint256,address,address)\":{\"details\":\"It's expected that this function can't be paused to prevent freezing user funds.\",\"params\":{\"maturity\":\"maturity date where the assets will be withdrawn.\",\"minAssetsRequired\":\"minimum amount required by the user (if discount included for early withdrawal).\",\"owner\":\"address that previously deposited the assets.\",\"positionAssets\":\"the amount of assets (principal + fee) to be withdrawn.\",\"receiver\":\"address that will receive the withdrawn assets.\"},\"returns\":{\"assetsDiscounted\":\"amount of assets withdrawn (can include a discount for early withdraw).\"}}},\"version\":1},\"userdoc\":{\"events\":{\"AccumulatedEarningsSmoothFactorSet(uint128)\":{\"notice\":\"Event emitted when the accumulatedEarningsSmoothFactor is changed by admin.\"},\"AssetSeized(address,address,uint256)\":{\"notice\":\"Event emitted when a user's collateral has been seized.\"},\"BorrowAtMaturity(uint256,address,address,address,uint256,uint256)\":{\"notice\":\"Event emitted when a user borrows amount of an asset from a certain maturity date.\"},\"DampSpeedSet(uint256,uint256)\":{\"notice\":\"emitted when the damp speeds are changed by admin.\"},\"DepositAtMaturity(uint256,address,address,uint256,uint256)\":{\"notice\":\"Event emitted when a user deposits an amount of an asset to a certain maturity date collecting a fee at the end of the period.\"},\"InterestRateModelSet(address)\":{\"notice\":\"emitted when the interestRateModel is changed by admin.\"},\"LiquidateBorrow(address,address,uint256,address,uint256)\":{\"notice\":\"Event emitted when a user's position had a liquidation.\"},\"MaxFuturePoolsSet(uint256)\":{\"notice\":\"Event emitted when the maxFuturePools is changed by admin.\"},\"PenaltyRateSet(uint256)\":{\"notice\":\"emitted when the penaltyRate is changed by admin.\"},\"RepayAtMaturity(uint256,address,address,uint256,uint256)\":{\"notice\":\"Event emitted when a user repays its borrows after maturity.\"},\"SmartPoolEarningsAccrued(uint256,uint256)\":{\"notice\":\"Event emitted when earnings are accrued to the smart pool.\"},\"SmartPoolReserveFactorSet(uint256)\":{\"notice\":\"emitted when the smartPoolReserveFactor is changed by admin.\"},\"WithdrawAtMaturity(uint256,address,address,address,uint256,uint256)\":{\"notice\":\"Event emitted when a user collects its deposits after maturity.\"}},\"kind\":\"user\",\"methods\":{\"depositAtMaturity(uint256,uint256,uint256,address)\":{\"notice\":\"Deposits a certain amount to a maturity.\"},\"getAccountSnapshot(address,uint256)\":{\"notice\":\"Gets current snapshot for a wallet in certain maturity.\"},\"liquidate(address,uint256,uint256,address)\":{\"notice\":\"Liquidates uncollaterized position(s).\"},\"pause()\":{\"notice\":\"Sets the _pause state to true in case of emergency, triggered by an authorized account.\"},\"redeem(uint256,address,address)\":{\"notice\":\"Redeems the owner's smart pool assets to the receiver address.\"},\"repayAtMaturity(uint256,uint256,uint256,address)\":{\"notice\":\"Repays a certain amount to a maturity.\"},\"seize(address,address,uint256)\":{\"notice\":\"Public function to seize a certain amount of tokens.\"},\"setAccumulatedEarningsSmoothFactor(uint128)\":{\"notice\":\"Sets the factor used when smoothly accruing earnings to the smart pool.\"},\"setDampSpeed((uint256,uint256))\":{\"notice\":\"Sets the damp speed used to update the smartPoolAssetsAverage.\"},\"setInterestRateModel(address)\":{\"notice\":\"Sets the interest rate model to be used by this PoolAccounting.\"},\"setMaxFuturePools(uint8)\":{\"notice\":\"Sets the protocol's max future pools for borrowing and lending.\"},\"setPenaltyRate(uint256)\":{\"notice\":\"Sets the penalty rate per second.\"},\"setSmartPoolReserveFactor(uint256)\":{\"notice\":\"Sets the percentage that represents the smart pool liquidity reserves that can't be borrowed.\"},\"totalAssets()\":{\"notice\":\"Calculates the smart pool balance plus earnings to be accrued at current timestamp from maturities and accumulator.\"},\"transfer(address,uint256)\":{\"notice\":\"Moves amount of shares from the caller's account to `to`.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Moves amount of shares from `from` to `to` using the allowance mechanism.\"},\"unpause()\":{\"notice\":\"Sets the _pause state to false when threat is gone, triggered by an authorized account.\"},\"withdraw(uint256,address,address)\":{\"notice\":\"Withdraws the owner's smart pool assets to the receiver address.\"},\"withdrawAtMaturity(uint256,uint256,uint256,address,address)\":{\"notice\":\"Withdraws a certain amount from a maturity.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FixedLender.sol\":\"FixedLender\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb4d87ee2ead4bd192b41c128f287d4b7f24b9e0cd740cc9b476881c461286007\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"@rari-capital/solmate/src/mixins/ERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\nimport {SafeTransferLib} from \\\"../utils/SafeTransferLib.sol\\\";\\nimport {FixedPointMathLib} from \\\"../utils/FixedPointMathLib.sol\\\";\\n\\n/// @notice Minimal ERC4626 tokenized Vault implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/mixins/ERC4626.sol)\\nabstract contract ERC4626 is ERC20 {\\n    using SafeTransferLib for ERC20;\\n    using FixedPointMathLib for uint256;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               IMMUTABLES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    ERC20 public immutable asset;\\n\\n    constructor(\\n        ERC20 _asset,\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC20(_name, _symbol, _asset.decimals()) {\\n        asset = _asset;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        DEPOSIT/WITHDRAWAL LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function deposit(uint256 assets, address receiver) public virtual returns (uint256 shares) {\\n        // Check for rounding error since we round down in previewDeposit.\\n        require((shares = previewDeposit(assets)) != 0, \\\"ZERO_SHARES\\\");\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        asset.safeTransferFrom(msg.sender, address(this), assets);\\n\\n        _mint(receiver, shares);\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        afterDeposit(assets, shares);\\n    }\\n\\n    function mint(uint256 shares, address receiver) public virtual returns (uint256 assets) {\\n        assets = previewMint(shares); // No need to check for rounding error, previewMint rounds up.\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        asset.safeTransferFrom(msg.sender, address(this), assets);\\n\\n        _mint(receiver, shares);\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n\\n        afterDeposit(assets, shares);\\n    }\\n\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) public virtual returns (uint256 shares) {\\n        shares = previewWithdraw(assets); // No need to check for rounding error, previewWithdraw rounds up.\\n\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\\n        }\\n\\n        beforeWithdraw(assets, shares);\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        asset.safeTransfer(receiver, assets);\\n    }\\n\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) public virtual returns (uint256 assets) {\\n        if (msg.sender != owner) {\\n            uint256 allowed = allowance[owner][msg.sender]; // Saves gas for limited approvals.\\n\\n            if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - shares;\\n        }\\n\\n        // Check for rounding error since we round down in previewRedeem.\\n        require((assets = previewRedeem(shares)) != 0, \\\"ZERO_ASSETS\\\");\\n\\n        beforeWithdraw(assets, shares);\\n\\n        _burn(owner, shares);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        asset.safeTransfer(receiver, assets);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ACCOUNTING LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function totalAssets() public view virtual returns (uint256);\\n\\n    function convertToShares(uint256 assets) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? assets : assets.mulDivDown(supply, totalAssets());\\n    }\\n\\n    function convertToAssets(uint256 shares) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? shares : shares.mulDivDown(totalAssets(), supply);\\n    }\\n\\n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\\n        return convertToShares(assets);\\n    }\\n\\n    function previewMint(uint256 shares) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? shares : shares.mulDivUp(totalAssets(), supply);\\n    }\\n\\n    function previewWithdraw(uint256 assets) public view virtual returns (uint256) {\\n        uint256 supply = totalSupply; // Saves an extra SLOAD if totalSupply is non-zero.\\n\\n        return supply == 0 ? assets : assets.mulDivUp(supply, totalAssets());\\n    }\\n\\n    function previewRedeem(uint256 shares) public view virtual returns (uint256) {\\n        return convertToAssets(shares);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                     DEPOSIT/WITHDRAWAL LIMIT LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function maxDeposit(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    function maxMint(address) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    function maxWithdraw(address owner) public view virtual returns (uint256) {\\n        return convertToAssets(balanceOf[owner]);\\n    }\\n\\n    function maxRedeem(address owner) public view virtual returns (uint256) {\\n        return balanceOf[owner];\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                          INTERNAL HOOKS LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function beforeWithdraw(uint256 assets, uint256 shares) internal virtual {}\\n\\n    function afterDeposit(uint256 assets, uint256 shares) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa0e0c28a727524fa94e7e6c1f4c793a6bd1e6d1bc652b7b02b343ebaf4cd774b\",\"license\":\"MIT\"},\"@rari-capital/solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0x43aa1509bb753f053143530705d9c4eee415691d26a4779769bf028a74e6ac69\",\"license\":\"MIT\"},\"@rari-capital/solmate/src/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    function powWad(int256 x, int256 y) internal pure returns (int256) {\\n        // Equivalent to x to the power of y because x ** y = (e ** ln(x)) ** y = e ** (ln(x) * y)\\n        return expWad((lnWad(x) * y) / int256(WAD)); // Using ln(x) means x must be greater than 0.\\n    }\\n\\n    function expWad(int256 x) internal pure returns (int256 r) {\\n        unchecked {\\n            // When the result is < 0.5 we return zero. This happens when\\n            // x <= floor(log(0.5e18) * 1e18) ~ -42e18\\n            if (x <= -42139678854452767551) return 0;\\n\\n            // When the result is > (2**255 - 1) / 1e18 we can not represent it as an\\n            // int. This happens when x >= floor(log((2**255 - 1) / 1e18) * 1e18) ~ 135.\\n            if (x >= 135305999368893231589) revert(\\\"EXP_OVERFLOW\\\");\\n\\n            // x is now in the range (-42, 136) * 1e18. Convert to (-42, 136) * 2**96\\n            // for more intermediate precision and a binary basis. This base conversion\\n            // is a multiplication by 1e18 / 2**96 = 5**18 / 2**78.\\n            x = (x << 78) / 5**18;\\n\\n            // Reduce range of x to (-\\u00bd ln 2, \\u00bd ln 2) * 2**96 by factoring out powers\\n            // of two such that exp(x) = exp(x') * 2**k, where k is an integer.\\n            // Solving this gives k = round(x / log(2)) and x' = x - k * log(2).\\n            int256 k = ((x << 96) / 54916777467707473351141471128 + 2**95) >> 96;\\n            x = x - k * 54916777467707473351141471128;\\n\\n            // k is in the range [-61, 195].\\n\\n            // Evaluate using a (6, 7)-term rational approximation.\\n            // p is made monic, we'll multiply by a scale factor later.\\n            int256 y = x + 1346386616545796478920950773328;\\n            y = ((y * x) >> 96) + 57155421227552351082224309758442;\\n            int256 p = y + x - 94201549194550492254356042504812;\\n            p = ((p * y) >> 96) + 28719021644029726153956944680412240;\\n            p = p * x + (4385272521454847904659076985693276 << 96);\\n\\n            // We leave p in 2**192 basis so we don't need to scale it back up for the division.\\n            int256 q = x - 2855989394907223263936484059900;\\n            q = ((q * x) >> 96) + 50020603652535783019961831881945;\\n            q = ((q * x) >> 96) - 533845033583426703283633433725380;\\n            q = ((q * x) >> 96) + 3604857256930695427073651918091429;\\n            q = ((q * x) >> 96) - 14423608567350463180887372962807573;\\n            q = ((q * x) >> 96) + 26449188498355588339934803723976023;\\n\\n            assembly {\\n                // Div in assembly because solidity adds a zero check despite the unchecked.\\n                // The q polynomial won't have zeros in the domain as all its roots are complex.\\n                // No scaling is necessary because p is already 2**96 too large.\\n                r := sdiv(p, q)\\n            }\\n\\n            // r should be in the range (0.09, 0.25) * 2**96.\\n\\n            // We now need to multiply r by:\\n            // * the scale factor s = ~6.031367120.\\n            // * the 2**k factor from the range reduction.\\n            // * the 1e18 / 2**96 factor for base conversion.\\n            // We do this all at once, with an intermediate result in 2**213\\n            // basis, so the final right shift is always by a positive amount.\\n            r = int256((uint256(r) * 3822833074963236453042738258902158003155416615667) >> uint256(195 - k));\\n        }\\n    }\\n\\n    function lnWad(int256 x) internal pure returns (int256 r) {\\n        unchecked {\\n            require(x > 0, \\\"UNDEFINED\\\");\\n\\n            // We want to convert x from 10**18 fixed point to 2**96 fixed point.\\n            // We do this by multiplying by 2**96 / 10**18. But since\\n            // ln(x * C) = ln(x) + ln(C), we can simply do nothing here\\n            // and add ln(2**96 / 10**18) at the end.\\n\\n            // Reduce range of x to (1, 2) * 2**96\\n            // ln(2^k * x) = k * ln(2) + ln(x)\\n            int256 k = int256(log2(uint256(x))) - 96;\\n            x <<= uint256(159 - k);\\n            x = int256(uint256(x) >> 159);\\n\\n            // Evaluate using a (8, 8)-term rational approximation.\\n            // p is made monic, we will multiply by a scale factor later.\\n            int256 p = x + 3273285459638523848632254066296;\\n            p = ((p * x) >> 96) + 24828157081833163892658089445524;\\n            p = ((p * x) >> 96) + 43456485725739037958740375743393;\\n            p = ((p * x) >> 96) - 11111509109440967052023855526967;\\n            p = ((p * x) >> 96) - 45023709667254063763336534515857;\\n            p = ((p * x) >> 96) - 14706773417378608786704636184526;\\n            p = p * x - (795164235651350426258249787498 << 96);\\n\\n            // We leave p in 2**192 basis so we don't need to scale it back up for the division.\\n            // q is monic by convention.\\n            int256 q = x + 5573035233440673466300451813936;\\n            q = ((q * x) >> 96) + 71694874799317883764090561454958;\\n            q = ((q * x) >> 96) + 283447036172924575727196451306956;\\n            q = ((q * x) >> 96) + 401686690394027663651624208769553;\\n            q = ((q * x) >> 96) + 204048457590392012362485061816622;\\n            q = ((q * x) >> 96) + 31853899698501571402653359427138;\\n            q = ((q * x) >> 96) + 909429971244387300277376558375;\\n            assembly {\\n                // Div in assembly because solidity adds a zero check despite the unchecked.\\n                // The q polynomial is known not to have zeros in the domain.\\n                // No scaling required because p is already 2**96 too large.\\n                r := sdiv(p, q)\\n            }\\n\\n            // r is in the range (0, 0.125) * 2**96\\n\\n            // Finalization, we need to:\\n            // * multiply by the scale factor s = 5.549\\u2026\\n            // * add ln(2**96 / 10**18)\\n            // * add k * ln(2)\\n            // * multiply by 10**18 / 2**96 = 5**18 >> 78\\n\\n            // mul s * 5e18 * 2**96, base is now 5**18 * 2**192\\n            r *= 1677202110996718588342820967067443963516166;\\n            // add ln(2) * k * 5e18 * 2**192\\n            r += 16597577552685614221487285958193947469193820559219878177908093499208371 * k;\\n            // add ln(2**96 / 10**18) * 5e18 * 2**192\\n            r += 600920179829731861736702779321621459595472258049074101567377883020018308;\\n            // base conversion: mul 2**18 / 2**192\\n            r >>= 174;\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide z by the denominator.\\n            z := div(z, denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            // Store x * y in z for now.\\n            z := mul(x, y)\\n\\n            // Equivalent to require(denominator != 0 && (x == 0 || (x * y) / x == y))\\n            if iszero(and(iszero(iszero(denominator)), or(iszero(x), eq(div(z, x), y)))) {\\n                revert(0, 0)\\n            }\\n\\n            // First, divide z - 1 by the denominator and add 1.\\n            // We allow z - 1 to underflow if z is 0, because we multiply the\\n            // end result by 0 if z is zero, ensuring we return 0 if z is zero.\\n            z := mul(iszero(iszero(z)), add(div(sub(z, 1), denominator), 1))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        assembly {\\n            let y := x // We start y at x, which will help us make our initial estimate.\\n\\n            z := 181 // The \\\"correct\\\" value is 1, but this saves a multiplication later.\\n\\n            // This segment is to get a reasonable initial estimate for the Babylonian method. With a bad\\n            // start, the correct # of bits increases ~linearly each iteration instead of ~quadratically.\\n\\n            // We check y >= 2^(k + 8) but shift right by k bits\\n            // each branch to ensure that if x >= 256, then y >= 256.\\n            if iszero(lt(y, 0x10000000000000000000000000000000000)) {\\n                y := shr(128, y)\\n                z := shl(64, z)\\n            }\\n            if iszero(lt(y, 0x1000000000000000000)) {\\n                y := shr(64, y)\\n                z := shl(32, z)\\n            }\\n            if iszero(lt(y, 0x10000000000)) {\\n                y := shr(32, y)\\n                z := shl(16, z)\\n            }\\n            if iszero(lt(y, 0x1000000)) {\\n                y := shr(16, y)\\n                z := shl(8, z)\\n            }\\n\\n            // Goal was to get z*z*y within a small factor of x. More iterations could\\n            // get y in a tighter range. Currently, we will have y in [256, 256*2^16).\\n            // We ensured y >= 256 so that the relative difference between y and y+1 is small.\\n            // That's not possible if x < 256 but we can just verify those cases exhaustively.\\n\\n            // Now, z*z*y <= x < z*z*(y+1), and y <= 2^(16+8), and either y >= 256, or x < 256.\\n            // Correctness can be checked exhaustively for x < 256, so we assume y >= 256.\\n            // Then z*sqrt(y) is within sqrt(257)/sqrt(256) of sqrt(x), or about 20bps.\\n\\n            // For s in the range [1/256, 256], the estimate f(s) = (181/1024) * (s+1) is in the range\\n            // (1/2.84 * sqrt(s), 2.84 * sqrt(s)), with largest error when s = 1 and when s = 256 or 1/256.\\n\\n            // Since y is in [256, 256*2^16), let a = y/65536, so that a is in [1/256, 256). Then we can estimate\\n            // sqrt(y) using sqrt(65536) * 181/1024 * (a + 1) = 181/4 * (y + 65536)/65536 = 181 * (y + 65536)/2^18.\\n\\n            // There is no overflow risk here since y < 2^136 after the first branch above.\\n            z := shr(18, mul(z, add(y, 65536))) // A mul() is saved from starting z at 181.\\n\\n            // Given the worst case multiplicative error of 2.84 above, 7 iterations should be enough.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // If x+1 is a perfect square, the Babylonian method cycles between\\n            // floor(sqrt(x)) and ceil(sqrt(x)). This statement ensures we return floor.\\n            // See: https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division\\n            // Since the ceil is rare, we save gas on the assignment and repeat division in the rare case.\\n            // If you don't care whether the floor or ceil square root is returned, you can remove this statement.\\n            z := sub(z, lt(div(x, z), z))\\n        }\\n    }\\n\\n    function log2(uint256 x) internal pure returns (uint256 r) {\\n        require(x > 0, \\\"UNDEFINED\\\");\\n\\n        assembly {\\n            r := shl(7, lt(0xffffffffffffffffffffffffffffffff, x))\\n            r := or(r, shl(6, lt(0xffffffffffffffff, shr(r, x))))\\n            r := or(r, shl(5, lt(0xffffffff, shr(r, x))))\\n            r := or(r, shl(4, lt(0xffff, shr(r, x))))\\n            r := or(r, shl(3, lt(0xff, shr(r, x))))\\n            r := or(r, shl(2, lt(0xf, shr(r, x))))\\n            r := or(r, shl(1, lt(0x3, shr(r, x))))\\n            r := or(r, lt(0x1, shr(r, x)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x622fcd8a49e132df5ec7651cc6ae3aaf0cf59bdcd67a9a804a1b9e2485113b7d\",\"license\":\"MIT\"},\"@rari-capital/solmate/src/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\n/// @notice Gas optimized reentrancy protection for smart contracts.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/ReentrancyGuard.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol)\\nabstract contract ReentrancyGuard {\\n    uint256 private locked = 1;\\n\\n    modifier nonReentrant() virtual {\\n        require(locked == 1, \\\"REENTRANCY\\\");\\n\\n        locked = 2;\\n\\n        _;\\n\\n        locked = 1;\\n    }\\n}\\n\",\"keccak256\":\"0xa0e50a0f232da7f289430601ba927c315266b20ec739761430b0fde926fefe55\",\"license\":\"MIT\"},\"@rari-capital/solmate/src/utils/SafeTransferLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Caution! This library won't check that a token has code, responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // We'll write our calldata to this slot below, but restore it later.\\n            let memPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(0, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(4, from) // Append the \\\"from\\\" argument.\\n            mstore(36, to) // Append the \\\"to\\\" argument.\\n            mstore(68, amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because that's the total length of our calldata (4 + 32 * 3)\\n                // Counterintuitively, this call() must be positioned after the or() in the\\n                // surrounding and() because and() evaluates its arguments from right to left.\\n                call(gas(), token, 0, 0, 100, 0, 32)\\n            )\\n\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, memPointer) // Restore the memPointer.\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // We'll write our calldata to this slot below, but restore it later.\\n            let memPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(0, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(4, to) // Append the \\\"to\\\" argument.\\n            mstore(36, amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because that's the total length of our calldata (4 + 32 * 2)\\n                // Counterintuitively, this call() must be positioned after the or() in the\\n                // surrounding and() because and() evaluates its arguments from right to left.\\n                call(gas(), token, 0, 0, 68, 0, 32)\\n            )\\n\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, memPointer) // Restore the memPointer.\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        assembly {\\n            // We'll write our calldata to this slot below, but restore it later.\\n            let memPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(0, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(4, to) // Append the \\\"to\\\" argument.\\n            mstore(36, amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because that's the total length of our calldata (4 + 32 * 2)\\n                // Counterintuitively, this call() must be positioned after the or() in the\\n                // surrounding and() because and() evaluates its arguments from right to left.\\n                call(gas(), token, 0, 0, 68, 0, 32)\\n            )\\n\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, memPointer) // Restore the memPointer.\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x5f2e1158c68c1f3d15b80e8a7dd92b6849f873066969562ad33c0abb80e536ff\",\"license\":\"MIT\"},\"contracts/Auditor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { FixedPointMathLib } from \\\"@rari-capital/solmate/src/utils/FixedPointMathLib.sol\\\";\\nimport { FixedLender, NotFixedLender } from \\\"./FixedLender.sol\\\";\\nimport { ExactlyOracle } from \\\"./ExactlyOracle.sol\\\";\\nimport { PoolLib } from \\\"./utils/PoolLib.sol\\\";\\n\\ncontract Auditor is AccessControl {\\n  using FixedPointMathLib for uint256;\\n\\n  // Struct to avoid stack too deep\\n  struct AccountLiquidity {\\n    uint256 balance;\\n    uint256 borrowBalance;\\n    uint256 oraclePrice;\\n  }\\n\\n  // Struct for FixedLender's markets\\n  struct Market {\\n    uint128 adjustFactor;\\n    uint8 decimals;\\n    uint8 index;\\n    bool isListed;\\n  }\\n\\n  // Protocol Management\\n  mapping(address => uint256) public accountMarkets;\\n  mapping(FixedLender => Market) public markets;\\n\\n  uint256 public liquidationIncentive;\\n  FixedLender[] public allMarkets;\\n\\n  ExactlyOracle public oracle;\\n\\n  /// @notice Event emitted when a new market is listed for borrow/lending.\\n  /// @param fixedLender address of the fixedLender market that was listed.\\n  event MarketListed(FixedLender fixedLender, uint8 decimals);\\n\\n  /// @notice Event emitted when a user enters a market to use his deposit as collateral for a loan.\\n  /// @param fixedLender address of the market that the user entered.\\n  /// @param account address of the user that just entered a market.\\n  event MarketEntered(FixedLender indexed fixedLender, address indexed account);\\n\\n  /// @notice Event emitted when a user leaves a market. Means that they would stop using their deposit as collateral\\n  /// and won't ask for any loans in this market.\\n  /// @param fixedLender address of the market that the user just left.\\n  /// @param account address of the user that just left a market.\\n  event MarketExited(FixedLender indexed fixedLender, address indexed account);\\n\\n  /// @notice Event emitted when a new Oracle has been set.\\n  /// @param newOracle address of the new oracle that is used to calculate liquidity.\\n  event OracleSet(ExactlyOracle newOracle);\\n\\n  /// @notice Event emitted when a new liquidationIncentive has been set.\\n  /// @param newLiquidationIncentive represented with 1e18 decimals.\\n  event LiquidationIncentiveSet(uint256 newLiquidationIncentive);\\n\\n  /// @notice Event emitted when a adjust factor is changed by admin.\\n  /// @param fixedLender address of the market that has a new adjust factor.\\n  /// @param newAdjustFactor adjust factor for the underlying asset.\\n  event AdjustFactorSet(FixedLender indexed fixedLender, uint256 newAdjustFactor);\\n\\n  constructor(ExactlyOracle oracle_, uint256 liquidationIncentive_) {\\n    _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\n    setOracle(oracle_);\\n    setLiquidationIncentive(liquidationIncentive_);\\n  }\\n\\n  /// @notice Allows assets of a certain `fixedLender` market to be used as collateral for borrowing other assets.\\n  /// @param fixedLender market to enable as collateral for `msg.sender`.\\n  function enterMarket(FixedLender fixedLender) external {\\n    validateMarketListed(fixedLender);\\n    uint256 marketIndex = markets[fixedLender].index;\\n\\n    uint256 marketMap = accountMarkets[msg.sender];\\n\\n    if ((marketMap & (1 << marketIndex)) != 0) return;\\n    accountMarkets[msg.sender] = marketMap | (1 << marketIndex);\\n\\n    emit MarketEntered(fixedLender, msg.sender);\\n  }\\n\\n  /// @notice Removes fixedLender from sender's account liquidity calculation.\\n  /// @dev Sender must not have an outstanding borrow balance in the asset, or be providing necessary collateral\\n  /// for an outstanding borrow.\\n  /// @param fixedLender The address of the asset to be removed.\\n  function exitMarket(FixedLender fixedLender) external {\\n    validateMarketListed(fixedLender);\\n    uint256 marketIndex = markets[fixedLender].index;\\n\\n    (uint256 amountHeld, uint256 borrowBalance) = fixedLender.getAccountSnapshot(msg.sender, PoolLib.MATURITY_ALL);\\n\\n    // Fail if the sender has a borrow balance\\n    if (borrowBalance != 0) revert BalanceOwed();\\n\\n    // Fail if the sender is not permitted to redeem all of their tokens\\n    validateAccountShortfall(fixedLender, msg.sender, amountHeld);\\n\\n    uint256 marketMap = accountMarkets[msg.sender];\\n\\n    if ((marketMap & (1 << marketIndex)) == 0) return;\\n    accountMarkets[msg.sender] = marketMap & ~(1 << marketIndex);\\n\\n    emit MarketExited(fixedLender, msg.sender);\\n  }\\n\\n  /// @notice Sets Oracle's to be used.\\n  /// @param _priceOracle address of the new oracle.\\n  function setOracle(ExactlyOracle _priceOracle) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n    oracle = _priceOracle;\\n    emit OracleSet(_priceOracle);\\n  }\\n\\n  /// @notice Sets liquidation incentive for the whole ecosystem.\\n  /// @dev Value can only be set between 20% and 5%.\\n  /// @param _liquidationIncentive new liquidation incentive. It's a factor, so 15% would be 1.15e18.\\n  function setLiquidationIncentive(uint256 _liquidationIncentive) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n    if (_liquidationIncentive > 1.2e18 || _liquidationIncentive < 1.05e18) revert InvalidParameter();\\n    liquidationIncentive = _liquidationIncentive;\\n    emit LiquidationIncentiveSet(_liquidationIncentive);\\n  }\\n\\n  /// @notice Enables a certain FixedLender market.\\n  /// @dev Enabling more than 256 markets will cause an overflow when casting market index to uint8.\\n  /// @param fixedLender address to add to the protocol.\\n  /// @param adjustFactor fixedLender's adjust factor for the underlying asset.\\n  /// @param decimals decimals of the market's underlying asset.\\n  function enableMarket(\\n    FixedLender fixedLender,\\n    uint128 adjustFactor,\\n    uint8 decimals\\n  ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n    if (fixedLender.auditor() != this) revert AuditorMismatch();\\n\\n    if (markets[fixedLender].isListed) revert MarketAlreadyListed();\\n\\n    markets[fixedLender] = Market({\\n      isListed: true,\\n      adjustFactor: adjustFactor,\\n      decimals: decimals,\\n      index: uint8(allMarkets.length)\\n    });\\n\\n    allMarkets.push(fixedLender);\\n\\n    emit MarketListed(fixedLender, decimals);\\n    setAdjustFactor(fixedLender, adjustFactor);\\n  }\\n\\n  /// @notice Sets the adjust factor for a certain fixedLender.\\n  /// @dev Market should be listed and value can only be set between 90% and 30%.\\n  /// @param fixedLender address of the market to change adjust factor for.\\n  /// @param adjustFactor adjust factor for the underlying asset.\\n  function setAdjustFactor(FixedLender fixedLender, uint128 adjustFactor) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n    validateMarketListed(fixedLender);\\n    if (adjustFactor > 0.9e18 || adjustFactor < 0.3e18) revert InvalidParameter();\\n    markets[fixedLender].adjustFactor = adjustFactor;\\n    emit AdjustFactorSet(fixedLender, adjustFactor);\\n  }\\n\\n  /// @notice Validates that the current state of the position and system are valid (liquidity).\\n  /// @dev Hook function to be called after calling the poolAccounting borrowMP function.\\n  /// @param fixedLender address of the fixedLender that will lend money in a maturity.\\n  /// @param borrower address of the user that will borrow money from a maturity date.\\n  function validateBorrowMP(FixedLender fixedLender, address borrower) external {\\n    validateMarketListed(fixedLender);\\n    uint256 marketIndex = markets[fixedLender].index;\\n    uint256 marketMap = accountMarkets[borrower];\\n\\n    // we validate borrow state\\n    if ((marketMap & (1 << marketIndex)) == 0) {\\n      // only fixedLenders may call validateBorrowMP if borrower not in market\\n      if (msg.sender != address(fixedLender)) revert NotFixedLender();\\n\\n      accountMarkets[borrower] = marketMap | (1 << marketIndex);\\n      emit MarketEntered(fixedLender, borrower);\\n\\n      // it should be impossible to break this invariant\\n      assert((accountMarkets[borrower] & (1 << marketIndex)) != 0);\\n    }\\n\\n    // We verify that current liquidity is not short\\n    (uint256 collateral, uint256 debt) = accountLiquidity(borrower, fixedLender, 0);\\n\\n    if (collateral < debt) revert InsufficientLiquidity();\\n  }\\n\\n  /// @notice Allows/rejects liquidation of assets.\\n  /// @dev This function can be called externally, but only will have effect when called from a fixedLender.\\n  /// @param fixedLenderBorrowed market from where the debt is pending.\\n  /// @param fixedLenderCollateral market where the assets will be liquidated (should be msg.sender on FixedLender.sol).\\n  /// @param liquidator address that is liquidating the assets.\\n  /// @param borrower address which the assets are being liquidated.\\n  function liquidateAllowed(\\n    FixedLender fixedLenderBorrowed,\\n    FixedLender fixedLenderCollateral,\\n    address liquidator,\\n    address borrower\\n  ) external view {\\n    if (borrower == liquidator) revert LiquidatorNotBorrower();\\n\\n    // if markets are listed, they have the same auditor\\n    if (!markets[fixedLenderBorrowed].isListed || !markets[fixedLenderCollateral].isListed) revert MarketNotListed();\\n\\n    // The borrower must have shortfall in order to be liquidatable\\n    (uint256 sumCollateral, uint256 sumDebt) = accountLiquidity(borrower, FixedLender(address(0)), 0);\\n\\n    if (sumCollateral >= sumDebt) revert InsufficientShortfall();\\n  }\\n\\n  /// @notice Allow/rejects seizing of assets.\\n  /// @dev This function can be called externally, but only will have effect when called from a fixedLender.\\n  /// @param fixedLenderCollateral market where the assets will be seized (should be msg.sender on FixedLender.sol).\\n  /// @param fixedLenderBorrowed market from where the debt will be paid.\\n  /// @param liquidator address to validate where the seized assets will be received.\\n  /// @param borrower address to validate where the assets will be removed.\\n  function seizeAllowed(\\n    FixedLender fixedLenderCollateral,\\n    FixedLender fixedLenderBorrowed,\\n    address liquidator,\\n    address borrower\\n  ) external view {\\n    if (borrower == liquidator) revert LiquidatorNotBorrower();\\n\\n    // If markets are listed, they have also the same Auditor\\n    if (!markets[fixedLenderCollateral].isListed || !markets[fixedLenderBorrowed].isListed) revert MarketNotListed();\\n  }\\n\\n  /// @notice Calculates the amount of collateral to be seized when a position is undercollaterized.\\n  /// @param fixedLenderBorrowed market from where the debt is pending.\\n  /// @param fixedLenderCollateral market where the assets will be liquidated (should be msg.sender on FixedLender.sol).\\n  /// @param actualRepayAmount repay amount in the borrowed asset.\\n  /// @return amount of collateral to be seized.\\n  function liquidateCalculateSeizeAmount(\\n    FixedLender fixedLenderBorrowed,\\n    FixedLender fixedLenderCollateral,\\n    uint256 actualRepayAmount\\n  ) external view returns (uint256) {\\n    // Read oracle prices for borrowed and collateral markets\\n    uint256 priceBorrowed = oracle.getAssetPrice(fixedLenderBorrowed);\\n    uint256 priceCollateral = oracle.getAssetPrice(fixedLenderCollateral);\\n\\n    uint256 amountInUSD = actualRepayAmount.mulDivDown(priceBorrowed, 10**markets[fixedLenderBorrowed].decimals);\\n    // 10**18: usd amount decimals\\n    uint256 seizeTokens = amountInUSD.mulDivDown(10**markets[fixedLenderCollateral].decimals, priceCollateral);\\n\\n    return seizeTokens.mulWadDown(liquidationIncentive);\\n  }\\n\\n  /// @notice Retrieves all markets.\\n  function getAllMarkets() external view returns (FixedLender[] memory) {\\n    return allMarkets;\\n  }\\n\\n  /// @notice Checks if the user has an account liquidity shortfall\\n  /// @dev This function is called indirectly from fixedLender contracts(withdraw), eToken transfers and directly from\\n  /// this contract when the user wants to exit a market.\\n  /// @param fixedLender address of the fixedLender where the smart pool belongs.\\n  /// @param account address of the user to check for possible shortfall.\\n  /// @param amount amount that the user wants to withdraw or transfer.\\n  function validateAccountShortfall(\\n    FixedLender fixedLender,\\n    address account,\\n    uint256 amount\\n  ) public view {\\n    // If the user is not 'in' the market, then we can bypass the liquidity check\\n    if ((accountMarkets[account] & (1 << markets[fixedLender].index)) == 0) return;\\n\\n    // Otherwise, perform a hypothetical liquidity check to guard against shortfall\\n    (uint256 collateral, uint256 debt) = accountLiquidity(account, fixedLender, amount);\\n    if (collateral < debt) revert InsufficientLiquidity();\\n  }\\n\\n  /// @notice Returns account's liquidity for a certain market/maturity pool.\\n  /// @param account wallet which the liquidity will be calculated.\\n  /// @param fixedLenderToSimulate fixedLender in which we want to simulate withdraw/borrow ops (see next two args).\\n  /// @param withdrawAmount amount to simulate withdraw.\\n  /// @return sumCollateral sum of all collateral, already multiplied by each adjust factor. denominated in usd.\\n  /// @return sumDebt sum of all debt. denominated in usd.\\n  function accountLiquidity(\\n    address account,\\n    FixedLender fixedLenderToSimulate,\\n    uint256 withdrawAmount\\n  ) public view returns (uint256 sumCollateral, uint256 sumDebt) {\\n    AccountLiquidity memory vars; // Holds all our calculation results\\n\\n    // For each asset the account is in\\n    uint256 marketMap = accountMarkets[account];\\n    uint256 maxValue = allMarkets.length;\\n    for (uint256 i = 0; i < maxValue; ) {\\n      if ((marketMap & (1 << i)) != 0) {\\n        FixedLender market = allMarkets[i];\\n        uint256 decimals = markets[market].decimals;\\n        uint256 adjustFactor = markets[market].adjustFactor;\\n\\n        // Read the balances\\n        (vars.balance, vars.borrowBalance) = market.getAccountSnapshot(account, PoolLib.MATURITY_ALL);\\n\\n        // Get the normalized price of the asset (18 decimals)\\n        vars.oraclePrice = oracle.getAssetPrice(market);\\n\\n        // We sum all the collateral prices\\n        sumCollateral += vars.balance.mulDivDown(vars.oraclePrice, 10**decimals).mulWadDown(adjustFactor);\\n\\n        // We sum all the debt\\n        sumDebt += vars.borrowBalance.mulDivDown(vars.oraclePrice, 10**decimals);\\n\\n        // Simulate the effects of borrowing from/lending to a pool\\n        if (market == FixedLender(fixedLenderToSimulate)) {\\n          // Calculate the effects of redeeming fixedLenders\\n          // (having less collateral is the same as having more debt for this calculation)\\n          if (withdrawAmount != 0) {\\n            sumDebt += withdrawAmount.mulDivDown(vars.oraclePrice, 10**decimals).mulWadDown(adjustFactor);\\n          }\\n        }\\n      }\\n      unchecked {\\n        ++i;\\n      }\\n      if ((1 << i) > marketMap) break;\\n    }\\n  }\\n\\n  /// @notice Verifies if market is listed as valid.\\n  /// @param fixedLender address of the fixedLender to be validated by the auditor.\\n  function validateMarketListed(FixedLender fixedLender) internal view {\\n    if (!markets[fixedLender].isListed) revert MarketNotListed();\\n  }\\n}\\n\\nerror AuditorMismatch();\\nerror BalanceOwed();\\nerror InsufficientLiquidity();\\nerror InsufficientShortfall();\\nerror InvalidParameter();\\nerror LiquidatorNotBorrower();\\nerror MarketAlreadyListed();\\nerror MarketNotListed();\\n\",\"keccak256\":\"0x13543f8106b55bb7cd31d73d24832ec4468e8c737501ea6ce1e2061577196e36\",\"license\":\"GPL-3.0-or-later\"},\"contracts/ExactlyOracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { AggregatorV3Interface } from \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport { FixedLender } from \\\"./FixedLender.sol\\\";\\n\\n/// @title ExactlyOracle\\n/// @notice Proxy to get the price of an asset from a price source (Chainlink Price Feed Aggregator).\\ncontract ExactlyOracle is AccessControl {\\n  /// @notice Auditor's target precision.\\n  uint256 public constant TARGET_DECIMALS = 18;\\n  /// @notice Chainlink's Price Feed precision when using USD as the base currency.\\n  uint256 public constant ORACLE_DECIMALS = 8;\\n\\n  mapping(FixedLender => AggregatorV3Interface) public assetsSources;\\n  uint256 public immutable priceExpiration;\\n\\n  /// @notice Emitted when a FixedLender and source is changed by admin.\\n  /// @param fixedLender address of the asset used to get the price from this oracle.\\n  /// @param source address of Chainlink's Price Feed aggregator used to query the asset price in USD.\\n  event AssetSourceSet(FixedLender indexed fixedLender, AggregatorV3Interface indexed source);\\n\\n  /// @notice Constructor.\\n  /// @param priceExpiration_ The max delay time for Chainlink's prices to be considered as updated.\\n  constructor(uint256 priceExpiration_) {\\n    _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\n    priceExpiration = priceExpiration_;\\n  }\\n\\n  /// @notice Sets the Chainlink Price Feed Aggregator source for an asset.\\n  /// @param fixedLender The FixedLender address of the asset.\\n  /// @param source address of Chainlink's Price Feed aggregator used to query the asset price in USD.\\n  function setAssetSource(FixedLender fixedLender, AggregatorV3Interface source) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n    if (source.decimals() != ORACLE_DECIMALS) revert InvalidSource();\\n    assetsSources[fixedLender] = source;\\n    emit AssetSourceSet(fixedLender, source);\\n  }\\n\\n  /// @notice Gets an asset price by FixedLender.\\n  /// @dev If Chainlink's asset price is <= 0 or the updatedAt time is outdated the call is reverted.\\n  /// @param fixedLender The FixedLender address of the asset.\\n  /// @return The price of the asset scaled to 18-digit decimals.\\n  function getAssetPrice(FixedLender fixedLender) public view returns (uint256) {\\n    (, int256 price, , uint256 updatedAt, ) = assetsSources[fixedLender].latestRoundData();\\n    if (price > 0 && updatedAt >= block.timestamp - priceExpiration) return scaleOraclePriceByDigits(uint256(price));\\n    else revert InvalidPrice();\\n  }\\n\\n  /// @notice Scale the price returned by the oracle to an 18-digit decimal to be used by the Auditor.\\n  /// @param price The price to be scaled.\\n  /// @return The price of the asset scaled to 18-digit decimals.\\n  function scaleOraclePriceByDigits(uint256 price) internal pure returns (uint256) {\\n    return price * 10**(TARGET_DECIMALS - ORACLE_DECIMALS);\\n  }\\n}\\n\\nerror InvalidPrice();\\nerror InvalidSource();\\n\",\"keccak256\":\"0xb94a43b8c33c1c21bfbaa927add7d28db3387d20577788bee1428f22b5df656e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/FixedLender.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { Pausable } from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { ReentrancyGuard } from \\\"@rari-capital/solmate/src/utils/ReentrancyGuard.sol\\\";\\nimport { FixedPointMathLib } from \\\"@rari-capital/solmate/src/utils/FixedPointMathLib.sol\\\";\\nimport { ERC4626, ERC20, SafeTransferLib } from \\\"@rari-capital/solmate/src/mixins/ERC4626.sol\\\";\\nimport { PoolLib, InsufficientProtocolLiquidity } from \\\"./utils/PoolLib.sol\\\";\\nimport { Auditor, InvalidParameter } from \\\"./Auditor.sol\\\";\\nimport { InterestRateModel } from \\\"./InterestRateModel.sol\\\";\\nimport { PoolAccounting } from \\\"./PoolAccounting.sol\\\";\\nimport { TSUtils } from \\\"./utils/TSUtils.sol\\\";\\n\\ncontract FixedLender is ERC4626, AccessControl, PoolAccounting, ReentrancyGuard, Pausable {\\n  using FixedPointMathLib for uint256;\\n  using FixedPointMathLib for uint128;\\n  using SafeTransferLib for ERC20;\\n\\n  bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n  uint256 public constant CLOSE_FACTOR = 5e17;\\n\\n  Auditor public immutable auditor;\\n\\n  uint8 public maxFuturePools;\\n  uint32 public lastAccumulatedEarningsAccrual;\\n  uint128 public accumulatedEarningsSmoothFactor;\\n\\n  uint256 public smartPoolAssets;\\n\\n  /// @notice Event emitted when a user deposits an amount of an asset to a certain maturity date collecting a fee at\\n  /// the end of the period.\\n  /// @param maturity maturity in which the user will be able to collect his deposit + his fee.\\n  /// @param caller address which deposited the assets.\\n  /// @param owner address that will be able to withdraw the deposited assets.\\n  /// @param assets amount of the asset that were deposited.\\n  /// @param fee is the extra amount that it will be collected at maturity.\\n  event DepositAtMaturity(\\n    uint256 indexed maturity,\\n    address indexed caller,\\n    address indexed owner,\\n    uint256 assets,\\n    uint256 fee\\n  );\\n\\n  /// @notice Event emitted when a user collects its deposits after maturity.\\n  /// @param maturity maturity where the user collected its deposits.\\n  /// @param caller address which withdraw the asset.\\n  /// @param receiver address which will be collecting the assets.\\n  /// @param owner address which had the assets withdrawn.\\n  /// @param assets amount of the asset that were withdrawn.\\n  /// @param assetsDiscounted amount of the asset that were deposited (in case of early withdrawal).\\n  event WithdrawAtMaturity(\\n    uint256 indexed maturity,\\n    address caller,\\n    address indexed receiver,\\n    address indexed owner,\\n    uint256 assets,\\n    uint256 assetsDiscounted\\n  );\\n\\n  /// @notice Event emitted when a user borrows amount of an asset from a certain maturity date.\\n  /// @param maturity maturity in which the user will have to repay the loan.\\n  /// @param caller address which borrowed the asset.\\n  /// @param receiver address that received the borrowed assets.\\n  /// @param borrower address which will be repaying the borrowed assets.\\n  /// @param assets amount of the asset that were borrowed.\\n  /// @param fee extra amount that will need to be paid at maturity.\\n  event BorrowAtMaturity(\\n    uint256 indexed maturity,\\n    address caller,\\n    address indexed receiver,\\n    address indexed borrower,\\n    uint256 assets,\\n    uint256 fee\\n  );\\n\\n  /// @notice Event emitted when a user repays its borrows after maturity.\\n  /// @param maturity maturity where the user repaid its borrowed amounts.\\n  /// @param caller address which repaid the previously borrowed amount.\\n  /// @param borrower address which had the original debt.\\n  /// @param assets amount that was repaid.\\n  /// @param positionAssets amount of the debt that was covered in this repayment (penalties could have been repaid).\\n  event RepayAtMaturity(\\n    uint256 indexed maturity,\\n    address indexed caller,\\n    address indexed borrower,\\n    uint256 assets,\\n    uint256 positionAssets\\n  );\\n\\n  /// @notice Event emitted when a user's position had a liquidation.\\n  /// @param receiver address which repaid the previously borrowed amount.\\n  /// @param borrower address which had the original debt.\\n  /// @param assets amount of the asset that were repaid.\\n  /// @param collateralFixedLender address of the asset that were seized by the liquidator.\\n  /// @param seizedAssets amount seized of the collateral.\\n  event LiquidateBorrow(\\n    address indexed receiver,\\n    address indexed borrower,\\n    uint256 assets,\\n    FixedLender indexed collateralFixedLender,\\n    uint256 seizedAssets\\n  );\\n\\n  /// @notice Event emitted when a user's collateral has been seized.\\n  /// @param liquidator address which seized this collateral.\\n  /// @param borrower address which had the original debt.\\n  /// @param assets amount seized of the collateral.\\n  event AssetSeized(address indexed liquidator, address indexed borrower, uint256 assets);\\n\\n  /// @notice Event emitted when earnings are accrued to the smart pool.\\n  /// @param previousAssets previous balance of the smart pool, denominated in assets (underlying).\\n  /// @param earnings new smart pool earnings, denominated in assets (underlying).\\n  event SmartPoolEarningsAccrued(uint256 previousAssets, uint256 earnings);\\n\\n  /// @notice Event emitted when the accumulatedEarningsSmoothFactor is changed by admin.\\n  /// @param newAccumulatedEarningsSmoothFactor factor represented with 1e18 decimals.\\n  event AccumulatedEarningsSmoothFactorSet(uint128 newAccumulatedEarningsSmoothFactor);\\n\\n  /// @notice Event emitted when the maxFuturePools is changed by admin.\\n  /// @param newMaxFuturePools represented with 0 decimals.\\n  event MaxFuturePoolsSet(uint256 newMaxFuturePools);\\n\\n  constructor(\\n    ERC20 asset_,\\n    uint8 maxFuturePools_,\\n    uint128 accumulatedEarningsSmoothFactor_,\\n    Auditor auditor_,\\n    InterestRateModel interestRateModel_,\\n    uint256 penaltyRate_,\\n    uint256 smartPoolReserveFactor_,\\n    DampSpeed memory dampSpeed_\\n  )\\n    ERC4626(asset_, string(abi.encodePacked(\\\"EToken\\\", asset_.symbol())), string(abi.encodePacked(\\\"e\\\", asset_.symbol())))\\n    PoolAccounting(interestRateModel_, penaltyRate_, smartPoolReserveFactor_, dampSpeed_)\\n  {\\n    _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\n    auditor = auditor_;\\n    setMaxFuturePools(maxFuturePools_);\\n    setAccumulatedEarningsSmoothFactor(accumulatedEarningsSmoothFactor_);\\n  }\\n\\n  /// @notice Calculates the smart pool balance plus earnings to be accrued at current timestamp\\n  /// from maturities and accumulator.\\n  /// @return actual smartPoolAssets plus earnings to be accrued at current timestamp.\\n  function totalAssets() public view override returns (uint256) {\\n    unchecked {\\n      uint256 memMaxFuturePools = maxFuturePools;\\n      uint256 smartPoolEarnings = 0;\\n\\n      uint256 lastAccrual;\\n      uint256 unassignedEarnings;\\n      uint256 latestMaturity = block.timestamp - (block.timestamp % TSUtils.INTERVAL);\\n      uint256 maxMaturity = latestMaturity + memMaxFuturePools * TSUtils.INTERVAL;\\n\\n      assembly {\\n        mstore(0x20, maturityPools.slot) // hashing scratch space, second word for storage location hashing\\n      }\\n\\n      for (uint256 maturity = latestMaturity; maturity <= maxMaturity; maturity += TSUtils.INTERVAL) {\\n        assembly {\\n          mstore(0x00, maturity) // hashing scratch space, first word for storage location hashing\\n          let location := keccak256(0x00, 0x40) // struct storage location: keccak256([maturity, maturityPools.slot])\\n          unassignedEarnings := sload(add(location, 2)) // third word\\n          lastAccrual := sload(add(location, 3)) // forth word\\n        }\\n\\n        if (maturity > lastAccrual) {\\n          smartPoolEarnings += unassignedEarnings.mulDivDown(block.timestamp - lastAccrual, maturity - lastAccrual);\\n        }\\n      }\\n\\n      return smartPoolAssets + smartPoolEarnings + smartPoolAccumulatedEarnings();\\n    }\\n  }\\n\\n  /// @notice Withdraws the owner's smart pool assets to the receiver address.\\n  /// @dev Makes sure that the owner doesn't have shortfall after withdrawing.\\n  /// @param assets amount of underlying to be withdrawn.\\n  /// @param receiver address to which the assets will be transferred.\\n  /// @param owner address which owns the smart pool assets.\\n  function withdraw(\\n    uint256 assets,\\n    address receiver,\\n    address owner\\n  ) public override returns (uint256) {\\n    auditor.validateAccountShortfall(this, owner, assets);\\n    return super.withdraw(assets, receiver, owner);\\n  }\\n\\n  /// @notice Redeems the owner's smart pool assets to the receiver address.\\n  /// @dev Makes sure that the owner doesn't have shortfall after withdrawing.\\n  /// @param shares amount of shares to be redeemed for underlying asset.\\n  /// @param receiver address to which the assets will be transferred.\\n  /// @param owner address which owns the smart pool assets.\\n  function redeem(\\n    uint256 shares,\\n    address receiver,\\n    address owner\\n  ) public override returns (uint256) {\\n    auditor.validateAccountShortfall(this, owner, previewMint(shares));\\n    return super.redeem(shares, receiver, owner);\\n  }\\n\\n  /// @notice Hook to update the smart pool average, smart pool balance and distribute earnings from accumulator.\\n  /// @param assets amount of assets to be withdrawn from the smart pool.\\n  function beforeWithdraw(uint256 assets, uint256) internal override {\\n    uint256 memSPAssets = smartPoolAssets;\\n    updateSmartPoolAssetsAverage(memSPAssets);\\n    uint256 earnings = smartPoolAccumulatedEarnings();\\n    lastAccumulatedEarningsAccrual = uint32(block.timestamp);\\n    smartPoolEarningsAccumulator -= earnings;\\n    emit SmartPoolEarningsAccrued(memSPAssets, earnings);\\n    memSPAssets = memSPAssets + earnings - assets;\\n    smartPoolAssets = memSPAssets;\\n    // we check if the underlying liquidity that the user wants to withdraw is borrowed\\n    if (memSPAssets < smartPoolBorrowed) revert InsufficientProtocolLiquidity();\\n  }\\n\\n  /// @notice Hook to update the smart pool average, smart pool balance and distribute earnings from accumulator.\\n  /// @param assets amount of assets to be deposited to the smart pool.\\n  function afterDeposit(uint256 assets, uint256) internal virtual override whenNotPaused {\\n    uint256 memSPAssets = smartPoolAssets;\\n    updateSmartPoolAssetsAverage(memSPAssets);\\n    uint256 earnings = smartPoolAccumulatedEarnings();\\n    lastAccumulatedEarningsAccrual = uint32(block.timestamp);\\n    smartPoolEarningsAccumulator -= earnings;\\n    emit SmartPoolEarningsAccrued(memSPAssets, earnings);\\n    smartPoolAssets = memSPAssets + earnings + assets;\\n  }\\n\\n  /// @notice Calculates the earnings to be distributed from the accumulator given the current timestamp.\\n  /// @return earnings to be distributed from the accumulator.\\n  function smartPoolAccumulatedEarnings() internal view returns (uint256 earnings) {\\n    uint256 elapsed = block.timestamp - lastAccumulatedEarningsAccrual;\\n    if (elapsed == 0) return 0;\\n    earnings = smartPoolEarningsAccumulator.mulDivDown(\\n      elapsed,\\n      elapsed + accumulatedEarningsSmoothFactor.mulWadDown(maxFuturePools * TSUtils.INTERVAL)\\n    );\\n  }\\n\\n  /// @notice Moves amount of shares from the caller's account to `to`.\\n  /// @dev It's expected that this function can't be paused to prevent freezing user funds.\\n  /// Makes sure that the caller doesn't have shortfall after transferring.\\n  /// @param to address to which the tokens will be transferred.\\n  /// @param shares amount of tokens.\\n  function transfer(address to, uint256 shares) public virtual override returns (bool) {\\n    auditor.validateAccountShortfall(this, msg.sender, previewMint(shares));\\n    return super.transfer(to, shares);\\n  }\\n\\n  /// @notice Moves amount of shares from `from` to `to` using the allowance mechanism.\\n  /// @dev It's expected that this function can't be paused to prevent freezing user funds.\\n  /// Makes sure that `from` address doesn't have shortfall after transferring.\\n  /// @param from address from which the tokens will be transferred.\\n  /// @param to address to which the tokens will be transferred.\\n  /// @param shares amount of tokens.\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 shares\\n  ) public virtual override returns (bool) {\\n    auditor.validateAccountShortfall(this, from, previewMint(shares));\\n    return super.transferFrom(from, to, shares);\\n  }\\n\\n  /// @notice Sets the protocol's max future pools for borrowing and lending.\\n  /// @dev Value can not be 0 or higher than 224.\\n  /// Value shouldn't be lower than previous value or VALID maturities will become NOT_READY.\\n  /// @param futurePools number of pools to be active at the same time.\\n  function setMaxFuturePools(uint8 futurePools) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n    if (futurePools > 224 || futurePools == 0) revert InvalidParameter();\\n    maxFuturePools = futurePools;\\n    emit MaxFuturePoolsSet(futurePools);\\n  }\\n\\n  /// @notice Sets the factor used when smoothly accruing earnings to the smart pool.\\n  /// @dev Value can only be lower than 4. If set at 0, then all remaining accumulated earnings are\\n  /// distributed in following operation to the smart pool.\\n  /// @param accumulatedEarningsSmoothFactor_ represented with 18 decimals.\\n  function setAccumulatedEarningsSmoothFactor(uint128 accumulatedEarningsSmoothFactor_)\\n    public\\n    onlyRole(DEFAULT_ADMIN_ROLE)\\n  {\\n    if (accumulatedEarningsSmoothFactor_ > 4e18) revert InvalidParameter();\\n    accumulatedEarningsSmoothFactor = accumulatedEarningsSmoothFactor_;\\n    emit AccumulatedEarningsSmoothFactorSet(accumulatedEarningsSmoothFactor_);\\n  }\\n\\n  /// @notice Sets the _pause state to true in case of emergency, triggered by an authorized account.\\n  function pause() external onlyRole(PAUSER_ROLE) {\\n    _pause();\\n  }\\n\\n  /// @notice Sets the _pause state to false when threat is gone, triggered by an authorized account.\\n  function unpause() external onlyRole(PAUSER_ROLE) {\\n    _unpause();\\n  }\\n\\n  /// @notice Liquidates uncollaterized position(s).\\n  /// @dev Msg.sender liquidates borrower's position(s) and repays a certain amount of debt for multiple maturities,\\n  /// seizing a part of borrower's collateral.\\n  /// @param borrower wallet that has an outstanding debt across all maturities.\\n  /// @param positionAssets amount of debt to be covered by liquidator(msg.sender).\\n  /// @param maxAssetsAllowed maximum amount of debt that the liquidator is willing to accept.\\n  /// @param collateralFixedLender fixedLender from which the collateral will be seized to give the liquidator.\\n  function liquidate(\\n    address borrower,\\n    uint256 positionAssets,\\n    uint256 maxAssetsAllowed,\\n    FixedLender collateralFixedLender\\n  ) external nonReentrant whenNotPaused returns (uint256 repaidAssets) {\\n    // reverts on failure\\n    auditor.liquidateAllowed(this, collateralFixedLender, msg.sender, borrower);\\n\\n    (uint256 sumBorrows, ) = getAccountBorrows(borrower, PoolLib.MATURITY_ALL);\\n    positionAssets = Math.min(positionAssets, CLOSE_FACTOR.mulWadDown(sumBorrows));\\n\\n    uint256 encodedMaturities = userMpBorrowed[borrower];\\n    uint256 baseMaturity = encodedMaturities % (1 << 32);\\n    uint256 packedMaturities = encodedMaturities >> 32;\\n    for (uint224 i = 0; i < 224; ) {\\n      if ((packedMaturities & (1 << i)) != 0) {\\n        (uint256 actualRepay, uint256 coveredDebt) = noTransferRepay(\\n          baseMaturity + (i * TSUtils.INTERVAL),\\n          positionAssets,\\n          maxAssetsAllowed,\\n          borrower\\n        );\\n        repaidAssets += actualRepay;\\n        positionAssets -= coveredDebt;\\n        maxAssetsAllowed -= actualRepay;\\n      }\\n      if (positionAssets == 0) break;\\n      unchecked {\\n        ++i;\\n      }\\n      if ((1 << i) > packedMaturities) break;\\n    }\\n\\n    // reverts on failure\\n    uint256 seizeTokens = auditor.liquidateCalculateSeizeAmount(this, collateralFixedLender, repaidAssets);\\n\\n    // If this is also the collateral run seizeInternal to avoid re-entrancy, otherwise make an external call.\\n    // both revert on failure\\n    if (address(collateralFixedLender) == address(this)) {\\n      _seize(this, msg.sender, borrower, seizeTokens);\\n    } else {\\n      collateralFixedLender.seize(msg.sender, borrower, seizeTokens);\\n    }\\n\\n    // We emit a LiquidateBorrow event\\n    emit LiquidateBorrow(msg.sender, borrower, repaidAssets, collateralFixedLender, seizeTokens);\\n\\n    asset.safeTransferFrom(msg.sender, address(this), repaidAssets);\\n  }\\n\\n  /// @notice Public function to seize a certain amount of tokens.\\n  /// @dev Public function for liquidator to seize borrowers tokens in the smart pool.\\n  /// This function will only be called from another FixedLender, on `liquidation` calls.\\n  /// That's why msg.sender needs to be passed to the private function (to be validated as a market)\\n  /// @param liquidator address which will receive the seized tokens.\\n  /// @param borrower address from which the tokens will be seized.\\n  /// @param assets amount to be removed from borrower's possession.\\n  function seize(\\n    address liquidator,\\n    address borrower,\\n    uint256 assets\\n  ) external nonReentrant whenNotPaused {\\n    _seize(FixedLender(msg.sender), liquidator, borrower, assets);\\n  }\\n\\n  /// @dev Borrows a certain amount from a maturity date.\\n  /// @param maturity maturity date for repayment.\\n  /// @param assets amount to send to borrower.\\n  /// @param maxAssetsAllowed maximum amount of debt that the user is willing to accept.\\n  /// @param receiver address that will receive the borrowed assets.\\n  /// @param borrower address that will repay the borrowed assets.\\n  function borrowAtMaturity(\\n    uint256 maturity,\\n    uint256 assets,\\n    uint256 maxAssetsAllowed,\\n    address receiver,\\n    address borrower\\n  ) public nonReentrant whenNotPaused returns (uint256 assetsOwed) {\\n    // reverts on failure\\n    TSUtils.validateRequiredPoolState(maxFuturePools, maturity, TSUtils.State.VALID, TSUtils.State.NONE);\\n\\n    uint256 earningsSP;\\n    uint256 memSPAssets = smartPoolAssets;\\n    (assetsOwed, earningsSP) = borrowMP(maturity, borrower, assets, maxAssetsAllowed, memSPAssets);\\n\\n    if (msg.sender != borrower) {\\n      uint256 allowed = allowance[borrower][msg.sender]; // saves gas for limited approvals.\\n\\n      if (allowed != type(uint256).max) allowance[borrower][msg.sender] = allowed - previewWithdraw(assetsOwed);\\n    }\\n\\n    emit SmartPoolEarningsAccrued(memSPAssets, earningsSP);\\n    smartPoolAssets = memSPAssets + earningsSP;\\n    auditor.validateBorrowMP(this, borrower);\\n\\n    asset.safeTransfer(receiver, assets);\\n\\n    emit BorrowAtMaturity(maturity, msg.sender, receiver, borrower, assets, assetsOwed - assets);\\n  }\\n\\n  /// @notice Deposits a certain amount to a maturity.\\n  /// @param maturity maturity date / pool ID.\\n  /// @param assets amount to receive from the msg.sender.\\n  /// @param minAssetsRequired minimum amount of assets required by the depositor for the transaction to be accepted.\\n  /// @param receiver address that will be able to withdraw the deposited assets.\\n  /// @return maturityAssets total amount of assets (principal + fee) to be withdrawn at maturity.\\n  function depositAtMaturity(\\n    uint256 maturity,\\n    uint256 assets,\\n    uint256 minAssetsRequired,\\n    address receiver\\n  ) public nonReentrant whenNotPaused returns (uint256 maturityAssets) {\\n    // reverts on failure\\n    TSUtils.validateRequiredPoolState(maxFuturePools, maturity, TSUtils.State.VALID, TSUtils.State.NONE);\\n\\n    uint256 earningsSP;\\n    (maturityAssets, earningsSP) = depositMP(maturity, receiver, assets, minAssetsRequired);\\n\\n    uint256 memSPAssets = smartPoolAssets;\\n    emit SmartPoolEarningsAccrued(memSPAssets, earningsSP);\\n    smartPoolAssets = memSPAssets + earningsSP;\\n\\n    emit DepositAtMaturity(maturity, msg.sender, receiver, assets, maturityAssets - assets);\\n    asset.safeTransferFrom(msg.sender, address(this), assets);\\n  }\\n\\n  /// @notice Withdraws a certain amount from a maturity.\\n  /// @dev It's expected that this function can't be paused to prevent freezing user funds.\\n  /// @param maturity maturity date where the assets will be withdrawn.\\n  /// @param positionAssets the amount of assets (principal + fee) to be withdrawn.\\n  /// @param minAssetsRequired minimum amount required by the user (if discount included for early withdrawal).\\n  /// @param receiver address that will receive the withdrawn assets.\\n  /// @param owner address that previously deposited the assets.\\n  /// @return assetsDiscounted amount of assets withdrawn (can include a discount for early withdraw).\\n  function withdrawAtMaturity(\\n    uint256 maturity,\\n    uint256 positionAssets,\\n    uint256 minAssetsRequired,\\n    address receiver,\\n    address owner\\n  ) public nonReentrant returns (uint256 assetsDiscounted) {\\n    if (positionAssets == 0) revert ZeroWithdraw();\\n\\n    // reverts on failure\\n    TSUtils.validateRequiredPoolState(maxFuturePools, maturity, TSUtils.State.VALID, TSUtils.State.MATURED);\\n\\n    uint256 earningsSP;\\n    uint256 memSPAssets = smartPoolAssets;\\n    // We check if there's any discount to be applied for early withdrawal\\n    (assetsDiscounted, earningsSP) = withdrawMP(maturity, owner, positionAssets, minAssetsRequired, memSPAssets);\\n\\n    if (msg.sender != owner) {\\n      uint256 allowed = allowance[owner][msg.sender]; // saves gas for limited approvals.\\n\\n      if (allowed != type(uint256).max) allowance[owner][msg.sender] = allowed - previewWithdraw(assetsDiscounted);\\n    }\\n\\n    emit SmartPoolEarningsAccrued(memSPAssets, earningsSP);\\n    smartPoolAssets = memSPAssets + earningsSP;\\n\\n    asset.safeTransfer(receiver, assetsDiscounted);\\n\\n    emit WithdrawAtMaturity(maturity, msg.sender, receiver, owner, positionAssets, assetsDiscounted);\\n  }\\n\\n  /// @notice Repays a certain amount to a maturity.\\n  /// @param maturity maturity date where the assets will be repaid.\\n  /// @param positionAssets amount to be paid for the borrower's debt.\\n  /// @param maxAssetsAllowed maximum amount of debt that the user is willing to accept to be repaid.\\n  /// @param borrower address of the account that has the debt.\\n  /// @return actualRepayAssets the actual amount that was transferred into the protocol.\\n  function repayAtMaturity(\\n    uint256 maturity,\\n    uint256 positionAssets,\\n    uint256 maxAssetsAllowed,\\n    address borrower\\n  ) public nonReentrant whenNotPaused returns (uint256 actualRepayAssets) {\\n    // reverts on failure\\n    TSUtils.validateRequiredPoolState(maxFuturePools, maturity, TSUtils.State.VALID, TSUtils.State.MATURED);\\n\\n    (actualRepayAssets, ) = noTransferRepay(maturity, positionAssets, maxAssetsAllowed, borrower);\\n    asset.safeTransferFrom(msg.sender, address(this), actualRepayAssets);\\n  }\\n\\n  /// @notice Gets current snapshot for a wallet in certain maturity.\\n  /// @param who wallet to return status snapshot in the specified maturity date.\\n  /// @param maturity maturity. `PoolLib.MATURITY_ALL` (`type(uint256).max`) for all maturities.\\n  /// @return the amount the user deposited to the smart pool and the total money he owes from maturities.\\n  function getAccountSnapshot(address who, uint256 maturity) public view returns (uint256, uint256) {\\n    (uint256 position, uint256 penalties) = getAccountBorrows(who, maturity);\\n    return (maxWithdraw(who), position + penalties);\\n  }\\n\\n  /// @notice This function allows to (partially) repay a position. It does not transfer tokens.\\n  /// @dev Internal repay function, allows partial repayment.\\n  /// @param maturity the maturity to access the pool.\\n  /// @param positionAssets the amount of debt of the pool that should be paid.\\n  /// @param maxAssetsAllowed maximum amount of debt that the user is willing to accept to be repaid.\\n  /// @param borrower the address of the account that has the debt.\\n  /// @return actualRepayAssets the actual amount that should be transferred into the protocol.\\n  function noTransferRepay(\\n    uint256 maturity,\\n    uint256 positionAssets,\\n    uint256 maxAssetsAllowed,\\n    address borrower\\n  ) internal returns (uint256 actualRepayAssets, uint256 debtCovered) {\\n    if (positionAssets == 0) revert ZeroRepay();\\n\\n    uint256 earningsSP;\\n    (actualRepayAssets, debtCovered, earningsSP) = repayMP(maturity, borrower, positionAssets, maxAssetsAllowed);\\n\\n    uint256 memSPAssets = smartPoolAssets;\\n    emit SmartPoolEarningsAccrued(memSPAssets, earningsSP);\\n    smartPoolAssets = memSPAssets + earningsSP;\\n\\n    emit RepayAtMaturity(maturity, msg.sender, borrower, actualRepayAssets, debtCovered);\\n  }\\n\\n  /// @notice Internal function to seize a certain amount of tokens.\\n  /// @dev Internal function for liquidator to seize borrowers tokens in the smart pool.\\n  /// Will only be called from this FixedLender on `liquidation` or through `seize` calls from another FixedLender.\\n  /// That's why msg.sender needs to be passed to the internal function (to be validated as a market).\\n  /// @param seizerFixedLender address which is calling the seize function (see `seize` public function).\\n  /// @param liquidator address which will receive the seized tokens.\\n  /// @param borrower address from which the tokens will be seized.\\n  /// @param assets amount to be removed from borrower's possession.\\n  function _seize(\\n    FixedLender seizerFixedLender,\\n    address liquidator,\\n    address borrower,\\n    uint256 assets\\n  ) internal {\\n    if (assets == 0) revert ZeroWithdraw();\\n\\n    // reverts on failure\\n    auditor.seizeAllowed(this, seizerFixedLender, liquidator, borrower);\\n\\n    uint256 shares = previewWithdraw(assets);\\n    beforeWithdraw(assets, shares);\\n    _burn(borrower, shares);\\n    emit Withdraw(msg.sender, liquidator, borrower, assets, shares);\\n\\n    asset.safeTransfer(liquidator, assets);\\n    emit AssetSeized(liquidator, borrower, assets);\\n  }\\n}\\n\\nerror NotFixedLender();\\nerror ZeroWithdraw();\\nerror ZeroRepay();\\n\",\"keccak256\":\"0x2db9cef1f9fbe7f20032bac55e1b15835f21e4655cdfdadb492dc6c7ac04e212\",\"license\":\"GPL-3.0-or-later\"},\"contracts/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { FixedPointMathLib } from \\\"@rari-capital/solmate/src/utils/FixedPointMathLib.sol\\\";\\n\\nimport { InvalidParameter } from \\\"./Auditor.sol\\\";\\nimport { PoolLib } from \\\"./utils/PoolLib.sol\\\";\\n\\ncontract InterestRateModel is AccessControl {\\n  using PoolLib for PoolLib.MaturityPool;\\n  using FixedPointMathLib for uint256;\\n  using FixedPointMathLib for int256;\\n\\n  // Parameters to the system, expressed with 1e18 decimals\\n  uint256 public curveParameterA;\\n  int256 public curveParameterB;\\n  uint256 public maxUtilization;\\n  uint256 public fullUtilization;\\n  uint256 public spFeeRate;\\n\\n  /// @notice Emitted when the curve parameters are changed by admin.\\n  /// @param a new curve parameter A.\\n  /// @param b new curve parameter B.\\n  /// @param maxUtilization new max utilization rate.\\n  /// @param fullUtilization new full utilization rate.\\n  event CurveParametersSet(uint256 a, int256 b, uint256 maxUtilization, uint256 fullUtilization);\\n\\n  /// @notice Emitted when the spFeeRate parameter is changed by admin.\\n  /// @param spFeeRate rate charged to the mp suppliers to be accrued by the sp suppliers.\\n  event SpFeeRateSet(uint256 spFeeRate);\\n\\n  constructor(\\n    uint256 curveParameterA_,\\n    int256 curveParameterB_,\\n    uint256 maxUtilization_,\\n    uint256 fullUtilization_,\\n    uint256 spFeeRate_\\n  ) {\\n    _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n\\n    setCurveParameters(curveParameterA_, curveParameterB_, maxUtilization_, fullUtilization_);\\n    setSPFeeRate(spFeeRate_);\\n  }\\n\\n  /// @notice Sets the rate charged to the mp depositors that the sp suppliers will retain for initially providing\\n  /// liquidity.\\n  /// @dev Value can only be set between 20% and 0%.\\n  /// @param spFeeRate_ percentage amount represented with 1e18 decimals.\\n  function setSPFeeRate(uint256 spFeeRate_) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n    if (spFeeRate_ > 0.2e18) revert InvalidParameter();\\n    spFeeRate = spFeeRate_;\\n    emit SpFeeRateSet(spFeeRate_);\\n  }\\n\\n  /// @notice Gets this model's curve parameters.\\n  /// @return parameters (curveA, curveB, maxUtilization, fullUtilization).\\n  function getCurveParameters()\\n    external\\n    view\\n    returns (\\n      uint256,\\n      int256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    return (curveParameterA, curveParameterB, maxUtilization, fullUtilization);\\n  }\\n\\n  /// @notice Calculates the amount of revenue sharing between the smart pool and the new MP supplier.\\n  /// @param suppliedSP amount of money currently being supplied in the maturity pool.\\n  /// @param unassignedEarnings earnings not yet accrued to the SP that should be shared with the current supplier.\\n  /// @param amount amount being provided by the MP supplier.\\n  /// @return earningsShare yield to be offered to the MP supplier.\\n  /// @return earningsShareSP yield to be accrued by the SP suppliers for initially providing the liquidity.\\n  function getYieldForDeposit(\\n    uint256 suppliedSP,\\n    uint256 unassignedEarnings,\\n    uint256 amount\\n  ) external view returns (uint256 earningsShare, uint256 earningsShareSP) {\\n    if (suppliedSP != 0) {\\n      // User can't make more fees after the total borrowed amount\\n      earningsShare = unassignedEarnings.mulDivDown(Math.min(amount, suppliedSP), suppliedSP);\\n      earningsShareSP = earningsShare.mulWadDown(spFeeRate);\\n      earningsShare -= earningsShareSP;\\n    }\\n  }\\n\\n  /// @notice Updates this model's curve parameters.\\n  /// @dev FullUR can only be between 1 and 52. UMaxUR can only be higher than FullUR and at most 3 times FullUR.\\n  /// @param curveParameterA_ curve parameter A.\\n  /// @param curveParameterB_ curve parameter B.\\n  /// @param maxUtilization_ % of MP supp.\\n  /// @param fullUtilization_ full UR.\\n  function setCurveParameters(\\n    uint256 curveParameterA_,\\n    int256 curveParameterB_,\\n    uint256 maxUtilization_,\\n    uint256 fullUtilization_\\n  ) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n    if (\\n      fullUtilization_ > 52e18 ||\\n      fullUtilization_ < 1e18 ||\\n      fullUtilization_ >= maxUtilization_ ||\\n      fullUtilization_ < maxUtilization_ / 3\\n    ) revert InvalidParameter();\\n\\n    curveParameterA = curveParameterA_;\\n    curveParameterB = curveParameterB_;\\n    maxUtilization = maxUtilization_;\\n    fullUtilization = fullUtilization_;\\n\\n    // reverts if it's an invalid curve (such as one yielding a negative interest rate).\\n    // doing it works because it's a monotonously increasing function.\\n    rate(0, 0);\\n\\n    emit CurveParametersSet(curveParameterA_, curveParameterB_, maxUtilization_, fullUtilization_);\\n  }\\n\\n  /// @notice Gets fee to borrow a certain amount in a certain maturity with supply/demand values in the maturity pool\\n  /// and supply/demand values in the smart pool.\\n  /// @param maturity maturity date for calculating days left to maturity.\\n  /// @param currentDate the current block timestamp. Received from caller for easier testing.\\n  /// @param amount the current borrow's amount.\\n  /// @param borrowedMP ex-ante amount borrowed from this maturity.\\n  /// @param suppliedMP deposits in maturity pool.\\n  /// @param smartPoolAssetsAverage the average of the smart pool's assets.\\n  /// @return fee the borrower will have to pay, as a factor (1% interest is represented as the wad for 0.01 == 10^16).\\n  function getRateToBorrow(\\n    uint256 maturity,\\n    uint256 currentDate,\\n    uint256 amount,\\n    uint256 borrowedMP,\\n    uint256 suppliedMP,\\n    uint256 smartPoolAssetsAverage\\n  ) public view returns (uint256) {\\n    if (currentDate >= maturity) revert AlreadyMatured();\\n\\n    uint256 supplied = suppliedMP + smartPoolAssetsAverage.divWadDown(fullUtilization);\\n    uint256 utilizationBefore = borrowedMP.divWadDown(supplied);\\n    uint256 utilizationAfter = (borrowedMP + amount).divWadDown(supplied);\\n\\n    if (utilizationAfter > fullUtilization) revert UtilizationExceeded();\\n\\n    return rate(utilizationBefore, utilizationAfter).mulDivDown(maturity - currentDate, 365 days);\\n  }\\n\\n  /// @notice Returns the interest rate integral from `u0` to `u1`, using the analytical solution (ln).\\n  /// @dev handles special case where delta utilization tends to zero, using l'h\\u00f4pital's rule.\\n  /// @param utilizationBefore ex-ante utilization rate, with 18 decimals precision.\\n  /// @param utilizationAfter ex-post utilization rate, with 18 decimals precision.\\n  /// @return the interest rate, with 18 decimals precision.\\n  function rate(uint256 utilizationBefore, uint256 utilizationAfter) internal view returns (uint256) {\\n    int256 r = int256(\\n      utilizationAfter - utilizationBefore < 2.5e9\\n        ? curveParameterA.divWadDown(maxUtilization - utilizationBefore)\\n        : curveParameterA.mulDivDown(\\n          uint256(int256((maxUtilization - utilizationBefore).divWadDown(maxUtilization - utilizationAfter)).lnWad()),\\n          utilizationAfter - utilizationBefore\\n        )\\n    ) + curveParameterB;\\n    assert(r >= 0);\\n    return uint256(r);\\n  }\\n}\\n\\nerror AlreadyMatured();\\nerror InvalidAmount();\\nerror UtilizationExceeded();\\n\",\"keccak256\":\"0xa23ff07be56a5b1dda646c1bf1f275b68df98ae237fb2184200fbdc8eec52159\",\"license\":\"GPL-3.0-or-later\"},\"contracts/PoolAccounting.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { FixedPointMathLib } from \\\"@rari-capital/solmate/src/utils/FixedPointMathLib.sol\\\";\\nimport { InterestRateModel } from \\\"./InterestRateModel.sol\\\";\\nimport { InvalidParameter } from \\\"./Auditor.sol\\\";\\nimport { TSUtils } from \\\"./utils/TSUtils.sol\\\";\\nimport { PoolLib } from \\\"./utils/PoolLib.sol\\\";\\n\\nabstract contract PoolAccounting is AccessControl {\\n  using PoolLib for PoolLib.MaturityPool;\\n  using PoolLib for PoolLib.Position;\\n  using PoolLib for uint256;\\n  using FixedPointMathLib for uint256;\\n  using FixedPointMathLib for int256;\\n\\n  // Vars used in `borrowMP` to avoid stack too deep problem\\n  struct BorrowVars {\\n    PoolLib.Position position;\\n    uint256 fee;\\n    uint256 newUnassignedEarnings;\\n    uint256 earningsSP;\\n  }\\n\\n  struct DampSpeed {\\n    uint256 up;\\n    uint256 down;\\n  }\\n\\n  mapping(uint256 => mapping(address => PoolLib.Position)) public mpUserSuppliedAmount;\\n  mapping(uint256 => mapping(address => PoolLib.Position)) public mpUserBorrowedAmount;\\n\\n  mapping(address => uint256) public userMpBorrowed;\\n  mapping(address => uint256) public userMpSupplied;\\n  mapping(uint256 => PoolLib.MaturityPool) public maturityPools;\\n  uint256 public smartPoolBorrowed;\\n  uint256 public smartPoolEarningsAccumulator;\\n  uint256 public smartPoolAssetsAverage;\\n  uint32 public lastAverageUpdate;\\n\\n  InterestRateModel public interestRateModel;\\n\\n  uint256 public penaltyRate;\\n  uint256 public smartPoolReserveFactor;\\n  uint256 public dampSpeedUp;\\n  uint256 public dampSpeedDown;\\n\\n  /// @notice emitted when the interestRateModel is changed by admin.\\n  /// @param newInterestRateModel new interest rate model to be used by this PoolAccounting.\\n  event InterestRateModelSet(InterestRateModel indexed newInterestRateModel);\\n\\n  /// @notice emitted when the penaltyRate is changed by admin.\\n  /// @param newPenaltyRate penaltyRate percentage per second represented with 1e18 decimals.\\n  event PenaltyRateSet(uint256 newPenaltyRate);\\n\\n  /// @notice emitted when the smartPoolReserveFactor is changed by admin.\\n  /// @param newSmartPoolReserveFactor smartPoolReserveFactor percentage.\\n  event SmartPoolReserveFactorSet(uint256 newSmartPoolReserveFactor);\\n\\n  /// @notice emitted when the damp speeds are changed by admin.\\n  /// @param newDampSpeedUp represented with 1e18 decimals.\\n  /// @param newDampSpeedDown represented with 1e18 decimals.\\n  event DampSpeedSet(uint256 newDampSpeedUp, uint256 newDampSpeedDown);\\n\\n  constructor(\\n    InterestRateModel interestRateModel_,\\n    uint256 penaltyRate_,\\n    uint256 smartPoolReserveFactor_,\\n    DampSpeed memory dampSpeed\\n  ) {\\n    _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    setInterestRateModel(interestRateModel_);\\n    setPenaltyRate(penaltyRate_);\\n    setSmartPoolReserveFactor(smartPoolReserveFactor_);\\n    setDampSpeed(dampSpeed);\\n  }\\n\\n  /// @notice Sets the interest rate model to be used by this PoolAccounting.\\n  /// @param interestRateModel_ new interest rate model.\\n  function setInterestRateModel(InterestRateModel interestRateModel_) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n    interestRateModel = interestRateModel_;\\n    emit InterestRateModelSet(interestRateModel_);\\n  }\\n\\n  /// @notice Sets the penalty rate per second.\\n  /// @dev Value can only be set approximately between 5% and 1% daily.\\n  /// @param penaltyRate_ percentage represented with 18 decimals.\\n  function setPenaltyRate(uint256 penaltyRate_) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n    if (penaltyRate_ > 5.79e11 || penaltyRate_ < 1.15e11) revert InvalidParameter();\\n    penaltyRate = penaltyRate_;\\n    emit PenaltyRateSet(penaltyRate_);\\n  }\\n\\n  /// @notice Sets the percentage that represents the smart pool liquidity reserves that can't be borrowed.\\n  /// @dev Value can only be set between 20% and 0%.\\n  /// @param smartPoolReserveFactor_ parameter represented with 18 decimals.\\n  function setSmartPoolReserveFactor(uint256 smartPoolReserveFactor_) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n    if (smartPoolReserveFactor_ > 0.2e18) revert InvalidParameter();\\n    smartPoolReserveFactor = smartPoolReserveFactor_;\\n    emit SmartPoolReserveFactorSet(smartPoolReserveFactor_);\\n  }\\n\\n  /// @notice Sets the damp speed used to update the smartPoolAssetsAverage.\\n  /// @dev Values can only be set between 0 and 100%.\\n  /// @param dampSpeed represented with 18 decimals.\\n  function setDampSpeed(DampSpeed memory dampSpeed) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n    if (dampSpeed.up > 1e18 || dampSpeed.down > 1e18) revert InvalidParameter();\\n    dampSpeedUp = dampSpeed.up;\\n    dampSpeedDown = dampSpeed.down;\\n    emit DampSpeedSet(dampSpeed.up, dampSpeed.down);\\n  }\\n\\n  /// @notice Accounts for borrowing from a maturity pool.\\n  /// @dev It doesn't check liquidity for the borrower.\\n  /// The `fixedLender` should call `validateBorrowMP` immediately after calling this function.\\n  /// @param maturity maturity date / pool id where the assets will be borrowed.\\n  /// @param borrower borrower that will take the debt.\\n  /// @param amount amount that the borrower will be borrowing.\\n  /// @param maxAmountAllowed maximum amount that the borrower is willing to pay at maturity.\\n  /// @param smartPoolAssets total assets in the smart pool.\\n  /// @return totalOwedNewBorrow total amount that will need to be paid at maturity for this borrow.\\n  /// @return earningsSP amount of earnings to be accrued by the smart pool.\\n  function borrowMP(\\n    uint256 maturity,\\n    address borrower,\\n    uint256 amount,\\n    uint256 maxAmountAllowed,\\n    uint256 smartPoolAssets\\n  ) internal returns (uint256 totalOwedNewBorrow, uint256 earningsSP) {\\n    BorrowVars memory borrowVars;\\n    PoolLib.MaturityPool storage pool = maturityPools[maturity];\\n\\n    earningsSP = pool.accrueEarnings(maturity, block.timestamp);\\n\\n    updateSmartPoolAssetsAverage(smartPoolAssets);\\n    borrowVars.fee = amount.mulWadDown(\\n      interestRateModel.getRateToBorrow(\\n        maturity,\\n        block.timestamp,\\n        amount,\\n        pool.borrowed,\\n        pool.supplied,\\n        smartPoolAssetsAverage\\n      )\\n    );\\n    totalOwedNewBorrow = amount + borrowVars.fee;\\n\\n    uint256 memSPBorrowed = smartPoolBorrowed;\\n    memSPBorrowed = memSPBorrowed + pool.borrow(amount, smartPoolAssets - memSPBorrowed);\\n    smartPoolBorrowed = memSPBorrowed;\\n    if (memSPBorrowed > smartPoolAssets.mulWadDown(1e18 - smartPoolReserveFactor)) {\\n      revert SmartPoolReserveExceeded();\\n    }\\n    // We validate that the user is not taking arbitrary fees\\n    if (totalOwedNewBorrow > maxAmountAllowed) revert TooMuchSlippage();\\n\\n    // If user doesn't have a current position, we add it to the list of all of them\\n    borrowVars.position = mpUserBorrowedAmount[maturity][borrower];\\n    if (borrowVars.position.principal == 0) {\\n      userMpBorrowed[borrower] = userMpBorrowed[borrower].setMaturity(maturity);\\n    }\\n\\n    // We calculate what portion of the fees are to be accrued and what portion goes to earnings accumulator\\n    (borrowVars.newUnassignedEarnings, borrowVars.earningsSP) = PoolLib.distributeEarningsAccordingly(\\n      borrowVars.fee,\\n      pool.smartPoolBorrowed(),\\n      amount\\n    );\\n    smartPoolEarningsAccumulator += borrowVars.earningsSP;\\n    pool.earningsUnassigned += borrowVars.newUnassignedEarnings;\\n\\n    mpUserBorrowedAmount[maturity][borrower] = PoolLib.Position(\\n      borrowVars.position.principal + amount,\\n      borrowVars.position.fee + borrowVars.fee\\n    );\\n  }\\n\\n  /// @notice Accounts for depositing to a maturity pool.\\n  /// @param maturity maturity date / pool id where the assets will be deposited.\\n  /// @param supplier address that will be depositing the assets.\\n  /// @param amount amount that the supplier will be depositing.\\n  /// @param minAmountRequired minimum amount that the supplier is expecting to receive at maturity.\\n  /// @return currentTotalDeposit the amount that should be collected at maturity for this deposit.\\n  /// @return earningsSP amount of earnings to be accrued by the smart pool.\\n  function depositMP(\\n    uint256 maturity,\\n    address supplier,\\n    uint256 amount,\\n    uint256 minAmountRequired\\n  ) internal returns (uint256 currentTotalDeposit, uint256 earningsSP) {\\n    PoolLib.MaturityPool storage pool = maturityPools[maturity];\\n\\n    earningsSP = pool.accrueEarnings(maturity, block.timestamp);\\n\\n    (uint256 fee, uint256 feeSP) = interestRateModel.getYieldForDeposit(\\n      pool.smartPoolBorrowed(),\\n      pool.earningsUnassigned,\\n      amount\\n    );\\n\\n    currentTotalDeposit = amount + fee;\\n    if (currentTotalDeposit < minAmountRequired) revert TooMuchSlippage();\\n\\n    smartPoolBorrowed -= pool.deposit(amount);\\n    pool.earningsUnassigned -= fee + feeSP;\\n    smartPoolEarningsAccumulator += feeSP;\\n\\n    // We update users's position\\n    PoolLib.Position memory position = mpUserSuppliedAmount[maturity][supplier];\\n\\n    // If user doesn't have a current position, we add it to the list of all of them\\n    if (position.principal == 0) {\\n      userMpSupplied[supplier] = userMpSupplied[supplier].setMaturity(maturity);\\n    }\\n\\n    mpUserSuppliedAmount[maturity][supplier] = PoolLib.Position(position.principal + amount, position.fee + fee);\\n  }\\n\\n  /// @notice Accounts for withdrawing from a maturity pool.\\n  /// @param maturity maturity date / pool id where the asset should be accounted for.\\n  /// @param redeemer address that should have the assets withdrawn.\\n  /// @param positionAssets amount that the redeemer will be extracting from his position.\\n  /// @param minAmountRequired minimum amount that the supplier is expecting to withdraw.\\n  /// @param smartPoolAssets total assets in the smart pool.\\n  /// @return redeemAmountDiscounted amount of assets to be withdrawn (can include a discount for early withdraw).\\n  /// @return earningsSP amount of earnings to be accrued by the smart pool.\\n  function withdrawMP(\\n    uint256 maturity,\\n    address redeemer,\\n    uint256 positionAssets,\\n    uint256 minAmountRequired,\\n    uint256 smartPoolAssets\\n  ) internal returns (uint256 redeemAmountDiscounted, uint256 earningsSP) {\\n    PoolLib.MaturityPool storage pool = maturityPools[maturity];\\n\\n    earningsSP = pool.accrueEarnings(maturity, block.timestamp);\\n\\n    PoolLib.Position memory position = mpUserSuppliedAmount[maturity][redeemer];\\n\\n    if (positionAssets > position.principal + position.fee) positionAssets = position.principal + position.fee;\\n\\n    // We verify if there are any penalties/fee for him because of\\n    // early withdrawal - if so: discount\\n    if (block.timestamp < maturity) {\\n      updateSmartPoolAssetsAverage(smartPoolAssets);\\n      redeemAmountDiscounted = positionAssets.divWadDown(\\n        1e18 +\\n          interestRateModel.getRateToBorrow(\\n            maturity,\\n            block.timestamp,\\n            positionAssets,\\n            pool.borrowed,\\n            pool.supplied,\\n            smartPoolAssetsAverage\\n          )\\n      );\\n    } else {\\n      redeemAmountDiscounted = positionAssets;\\n    }\\n\\n    if (redeemAmountDiscounted < minAmountRequired) revert TooMuchSlippage();\\n\\n    // We remove the supply from the offer\\n    smartPoolBorrowed += pool.withdraw(\\n      PoolLib.Position(position.principal, position.fee).scaleProportionally(positionAssets).principal,\\n      smartPoolAssets - smartPoolBorrowed\\n    );\\n\\n    // All the fees go to unassigned or to the smart pool\\n    (uint256 earningsUnassigned, uint256 newEarningsSP) = PoolLib.distributeEarningsAccordingly(\\n      positionAssets - redeemAmountDiscounted,\\n      pool.smartPoolBorrowed(),\\n      redeemAmountDiscounted\\n    );\\n    pool.earningsUnassigned += earningsUnassigned;\\n    smartPoolEarningsAccumulator += newEarningsSP;\\n\\n    // the user gets discounted the full amount\\n    position.reduceProportionally(positionAssets);\\n    if (position.principal + position.fee == 0) {\\n      delete mpUserSuppliedAmount[maturity][redeemer];\\n      userMpSupplied[redeemer] = userMpSupplied[redeemer].clearMaturity(maturity);\\n    } else {\\n      // we proportionally reduce the values\\n      mpUserSuppliedAmount[maturity][redeemer] = position;\\n    }\\n  }\\n\\n  /// @notice Accounts for repaying from a maturity pool.\\n  /// @param maturity maturity date / pool id where the asset should be accounted for.\\n  /// @param borrower address where the debt will be reduced.\\n  /// @param positionAssets the sum of principal and fees that this repayment covers.\\n  /// @param maxAmountAllowed maximum amount of debt that the user is willing to accept to be repaid.\\n  /// @return repayAmount the amount with discounts included that will finally be transferred.\\n  /// @return debtCovered the sum of principal and fees that this repayment covers.\\n  /// @return earningsSP amount of earnings to be accrued by the smart pool depositors.\\n  function repayMP(\\n    uint256 maturity,\\n    address borrower,\\n    uint256 positionAssets,\\n    uint256 maxAmountAllowed\\n  )\\n    internal\\n    returns (\\n      uint256 repayAmount,\\n      uint256 debtCovered,\\n      uint256 earningsSP\\n    )\\n  {\\n    PoolLib.MaturityPool storage pool = maturityPools[maturity];\\n\\n    earningsSP = pool.accrueEarnings(maturity, block.timestamp);\\n\\n    PoolLib.Position memory position = mpUserBorrowedAmount[maturity][borrower];\\n\\n    debtCovered = Math.min(positionAssets, position.principal + position.fee);\\n\\n    PoolLib.Position memory scaleDebtCovered = PoolLib.Position(position.principal, position.fee).scaleProportionally(\\n      debtCovered\\n    );\\n\\n    // Early repayment allows you to get a discount from the unassigned earnings\\n    if (block.timestamp < maturity) {\\n      // We calculate the deposit fee considering the amount of debt the user'll pay\\n      (uint256 discountFee, uint256 feeSP) = interestRateModel.getYieldForDeposit(\\n        pool.smartPoolBorrowed(),\\n        pool.earningsUnassigned,\\n        scaleDebtCovered.principal\\n      );\\n\\n      // We remove the fee from unassigned earnings\\n      pool.earningsUnassigned -= discountFee + feeSP;\\n\\n      // The fee gets discounted from the user through `repayAmount`\\n      repayAmount = debtCovered - discountFee;\\n\\n      // The fee charged to the MP supplier go to the smart pool accumulator\\n      smartPoolEarningsAccumulator += feeSP;\\n    } else {\\n      repayAmount = debtCovered + debtCovered.mulWadDown((block.timestamp - maturity) * penaltyRate);\\n\\n      // All penalties go to the smart pool accumulator\\n      smartPoolEarningsAccumulator += repayAmount - debtCovered;\\n    }\\n\\n    // We verify that the user agrees to this discount or penalty\\n    if (repayAmount > maxAmountAllowed) revert TooMuchSlippage();\\n\\n    // We reduce the borrowed and we might decrease the SP debt\\n    smartPoolBorrowed -= pool.repay(scaleDebtCovered.principal);\\n\\n    // We update the user position\\n    position.reduceProportionally(debtCovered);\\n    if (position.principal + position.fee == 0) {\\n      delete mpUserBorrowedAmount[maturity][borrower];\\n      userMpBorrowed[borrower] = userMpBorrowed[borrower].clearMaturity(maturity);\\n    } else {\\n      // We proportionally reduce the values\\n      mpUserBorrowedAmount[maturity][borrower] = position;\\n    }\\n  }\\n\\n  /// @dev Gets all borrows for an account in certain maturity (or MATURITY_ALL).\\n  /// @param who account to return status snapshot in the specified maturity date.\\n  /// @param maturity maturity where the borrow is taking place. MATURITY_ALL returns all borrows.\\n  /// @return sumPositions the total amount of borrows in user position.\\n  /// @return sumPenalties the total penalties for late repayment in all maturities.\\n  function getAccountBorrows(address who, uint256 maturity)\\n    public\\n    view\\n    returns (uint256 sumPositions, uint256 sumPenalties)\\n  {\\n    if (maturity == PoolLib.MATURITY_ALL) {\\n      uint256 encodedMaturities = userMpBorrowed[who];\\n      uint256 baseMaturity = encodedMaturities % (1 << 32);\\n      uint256 packedMaturities = encodedMaturities >> 32;\\n      // We calculate all the timestamps using the baseMaturity and the following bits representing the following weeks\\n      for (uint256 i = 0; i < 224; ) {\\n        if ((packedMaturities & (1 << i)) != 0) {\\n          (uint256 position, uint256 penalties) = getAccountDebt(who, baseMaturity + (i * TSUtils.INTERVAL));\\n          sumPositions += position;\\n          sumPenalties += penalties;\\n        }\\n        unchecked {\\n          ++i;\\n        }\\n        if ((1 << i) > packedMaturities) break;\\n      }\\n    } else (sumPositions, sumPenalties) = getAccountDebt(who, maturity);\\n  }\\n\\n  /// @notice Gets the debt + penalties of an account for a certain maturity.\\n  /// @param who account to return debt status for the specified maturity.\\n  /// @param maturity amount to be transferred.\\n  /// @return position the position debt denominated in number of tokens.\\n  /// @return penalties the penalties for late repayment.\\n  function getAccountDebt(address who, uint256 maturity) internal view returns (uint256 position, uint256 penalties) {\\n    PoolLib.Position memory data = mpUserBorrowedAmount[maturity][who];\\n    position = data.principal + data.fee;\\n    uint256 secondsDelayed = TSUtils.secondsPre(maturity, block.timestamp);\\n    if (secondsDelayed > 0) penalties = position.mulWadDown(secondsDelayed * penaltyRate);\\n  }\\n\\n  /// @notice Updates the smartPoolAssetsAverage.\\n  /// @param smartPoolAssets smart pool total assets.\\n  function updateSmartPoolAssetsAverage(uint256 smartPoolAssets) internal {\\n    uint256 dampSpeedFactor = smartPoolAssets < smartPoolAssetsAverage ? dampSpeedDown : dampSpeedUp;\\n    uint256 averageFactor = uint256(1e18 - (-int256(dampSpeedFactor * (block.timestamp - lastAverageUpdate))).expWad());\\n    smartPoolAssetsAverage =\\n      smartPoolAssetsAverage.mulWadDown(1e18 - averageFactor) +\\n      averageFactor.mulWadDown(smartPoolAssets);\\n    lastAverageUpdate = uint32(block.timestamp);\\n  }\\n}\\n\\nerror AlreadyInitialized();\\nerror TooMuchSlippage();\\nerror SmartPoolReserveExceeded();\\n\",\"keccak256\":\"0x6870be70372fc3a9cd63e48b9c009f4305bf4bf1e93c1471daedab5bc433b91e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/PoolLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\nimport { FixedPointMathLib } from \\\"@rari-capital/solmate/src/utils/FixedPointMathLib.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { TSUtils } from \\\"./TSUtils.sol\\\";\\n\\nlibrary PoolLib {\\n  using FixedPointMathLib for uint256;\\n\\n  /// @notice contains the accountability of a maturity.\\n  /// @param borrowed total amount borrowed from the maturity.\\n  /// @param supplied total amount supplied to the maturity.\\n  /// @param earningsUnassigned total amount of earnings not yet distributed and accrued.\\n  /// @param lastAccrual timestamp for the last time that some earnings have been distributed to earningsSP.\\n  struct MaturityPool {\\n    uint256 borrowed;\\n    uint256 supplied;\\n    uint256 earningsUnassigned;\\n    uint256 lastAccrual;\\n  }\\n\\n  /// @notice contains principal and fee of a borrow or a supply position of a user in a maturity.\\n  /// @param principal amount borrowed or supplied to the maturity.\\n  /// @param fee amount of fees to be repaid or earned at maturity.\\n  struct Position {\\n    uint256 principal;\\n    uint256 fee;\\n  }\\n\\n  uint256 public constant MATURITY_ALL = type(uint256).max;\\n\\n  /// @notice calculates the amount that a maturity borrowed from the smart pool.\\n  /// @param pool maturity pool.\\n  /// @return amount borrowed from the maturity.\\n  function smartPoolBorrowed(MaturityPool storage pool) internal view returns (uint256) {\\n    uint256 borrowed = pool.borrowed;\\n    uint256 supplied = pool.supplied;\\n    return borrowed - Math.min(borrowed, supplied);\\n  }\\n\\n  /// @notice registers an operation to add supply to a maturity and potentially reduce smart pool debt.\\n  /// @param pool maturity pool where an amount will be added to the supply.\\n  /// @param amount amount to be added to the supply.\\n  /// @return smartPoolDebtReduction amount that will be reduced from the smart pool debt.\\n  function deposit(MaturityPool storage pool, uint256 amount) internal returns (uint256 smartPoolDebtReduction) {\\n    uint256 borrowed = pool.borrowed;\\n    uint256 supplied = pool.supplied;\\n    pool.supplied = supplied + amount;\\n    smartPoolDebtReduction = Math.min(borrowed - Math.min(borrowed, supplied), amount);\\n  }\\n\\n  /// @notice registers an operation to reduce borrowed amount from a maturity and potentially reduce smart pool debt.\\n  /// @param pool maturity where an amount will be repaid.\\n  /// @param amount amount to be added to the maturity.\\n  /// @return smartPoolDebtReduction amount that will be reduced from the smart pool debt.\\n  function repay(MaturityPool storage pool, uint256 amount) internal returns (uint256 smartPoolDebtReduction) {\\n    uint256 borrowed = pool.borrowed;\\n    uint256 supplied = pool.supplied;\\n    pool.borrowed = borrowed - amount;\\n    smartPoolDebtReduction = Math.min(borrowed - Math.min(borrowed, supplied), amount);\\n  }\\n\\n  /// @notice registers an operation to increase borrowed amount of a maturity and potentially increase smart pool debt.\\n  /// @param pool maturity where an amount will be borrowed.\\n  /// @param amount amount to be borrowed from the maturity.\\n  /// @return smartPoolDebtAddition amount of new debt that needs to be borrowed from the smart pool.\\n  function borrow(\\n    MaturityPool storage pool,\\n    uint256 amount,\\n    uint256 maxDebt\\n  ) internal returns (uint256 smartPoolDebtAddition) {\\n    uint256 borrowed = pool.borrowed;\\n    uint256 newBorrowed = borrowed + amount;\\n    uint256 oldSupply = Math.max(borrowed, pool.supplied);\\n\\n    smartPoolDebtAddition = newBorrowed - Math.min(oldSupply, newBorrowed);\\n\\n    if (smartPoolDebtAddition > maxDebt) revert InsufficientProtocolLiquidity();\\n\\n    pool.borrowed = newBorrowed;\\n  }\\n\\n  /// @notice registers an operation to reduce supply from a maturity and potentially increase smart pool debt.\\n  /// @param pool maturity where amount will be withdrawn.\\n  /// @param amountToDiscount amoun to be withdrawn from the maturity.\\n  /// @return smartPoolDebtAddition amount of new debt that needs to be borrowed from the smart pool.\\n  function withdraw(\\n    MaturityPool storage pool,\\n    uint256 amountToDiscount,\\n    uint256 maxDebt\\n  ) internal returns (uint256 smartPoolDebtAddition) {\\n    uint256 borrowed = pool.borrowed;\\n    uint256 supplied = pool.supplied;\\n    uint256 newSupply = supplied - amountToDiscount;\\n\\n    smartPoolDebtAddition = Math.min(supplied, borrowed) - Math.min(newSupply, borrowed);\\n\\n    if (smartPoolDebtAddition > maxDebt) revert InsufficientProtocolLiquidity();\\n\\n    pool.supplied = newSupply;\\n  }\\n\\n  /// @notice accrues smart pool earnings from earningsUnassigned based on the lastAccrual time.\\n  /// @param pool maturity where earnings will be accrued.\\n  /// @param currentTimestamp timestamp of the current transaction.\\n  /// @param maturity maturity date of the pool.\\n  /// @return earningsSP amount of earnings to be distributed to the smart pool.\\n  function accrueEarnings(\\n    MaturityPool storage pool,\\n    uint256 maturity,\\n    uint256 currentTimestamp\\n  ) internal returns (uint256 earningsSP) {\\n    uint256 lastAccrual = pool.lastAccrual;\\n\\n    if (lastAccrual == maturity) return 0;\\n\\n    // seconds from last accrual to the closest:\\n    // maturity date or the current timestamp\\n    uint256 secondsSinceLastAccrue = TSUtils.secondsPre(lastAccrual, Math.min(maturity, currentTimestamp));\\n    // seconds from last accrual to the maturity date\\n    uint256 secondsTotalToMaturity = TSUtils.secondsPre(lastAccrual, maturity);\\n    pool.lastAccrual = Math.min(maturity, currentTimestamp);\\n\\n    // assign some of the earnings to be collected at maturity\\n    uint256 earningsUnassigned = pool.earningsUnassigned;\\n    earningsSP = earningsUnassigned.mulDivDown(secondsSinceLastAccrue, secondsTotalToMaturity);\\n    pool.earningsUnassigned = earningsUnassigned - earningsSP;\\n  }\\n\\n  /// @notice modify positions based on a certain amount, keeping the original principal/fee ratio.\\n  /// @dev modifies the original struct and returns it. Needs for the amount to be less than the principal and the fee\\n  /// @param position original position to be scaled.\\n  /// @param amount to be used as a full value (principal + interest).\\n  /// @return Position scaled position.\\n  function scaleProportionally(Position memory position, uint256 amount) internal pure returns (Position memory) {\\n    uint256 principal = amount.mulDivDown(position.principal, position.principal + position.fee);\\n    position.principal = principal;\\n    position.fee = amount - principal;\\n    return position;\\n  }\\n\\n  /// @notice reduce positions based on a certain amount, keeping the original principal/fee ratio.\\n  /// @dev modifies the original struct and returns it.\\n  /// @param position original position to be reduced.\\n  /// @param amount to be used as a full value (principal + interest).\\n  /// @return Position reduced position.\\n  function reduceProportionally(Position memory position, uint256 amount) internal pure returns (Position memory) {\\n    uint256 principal = amount.mulDivDown(position.principal, position.principal + position.fee);\\n    position.principal -= principal;\\n    position.fee -= amount - principal;\\n    return position;\\n  }\\n\\n  /// @notice calculates what proportion of earnings would amountFunded represent considering suppliedSP.\\n  /// @param earnings amount to be distributed.\\n  /// @param suppliedSP amount that the maturity borrowed from the smart pool.\\n  /// @param amountFunded amount that will be checked if came from the smart pool or maturity.\\n  /// @return earningsUnassigned earnings to be added to earningsUnassigned.\\n  /// @return earningsSP earnings to be distributed to the smart pool.\\n  function distributeEarningsAccordingly(\\n    uint256 earnings,\\n    uint256 suppliedSP,\\n    uint256 amountFunded\\n  ) internal pure returns (uint256 earningsUnassigned, uint256 earningsSP) {\\n    earningsSP = amountFunded == 0\\n      ? 0\\n      : earnings.mulDivDown(amountFunded - Math.min(suppliedSP, amountFunded), amountFunded);\\n    earningsUnassigned = earnings - earningsSP;\\n  }\\n\\n  /// @notice adds a maturity date to the borrow or supply positions of the user.\\n  /// @param encoded encoded maturity dates where the user borrowed or supplied to.\\n  /// @param maturity the new maturity where the user will borrow or supply to.\\n  /// @return updated encoded maturity dates.\\n  function setMaturity(uint256 encoded, uint256 maturity) internal pure returns (uint256) {\\n    // we initialize the maturity date with also the 1st bit on the 33th position set\\n    if (encoded == 0) return maturity | (1 << 32);\\n\\n    uint256 baseMaturity = encoded % (1 << 32);\\n    if (maturity < baseMaturity) {\\n      // If the new maturity date is lower than the base, then we need to set it as the new base. We wipe clean the\\n      // last 32 bits, we shift the amount of INTERVALS and we set the new value with the 33rd bit set\\n      uint256 range = (baseMaturity - maturity) / TSUtils.INTERVAL;\\n      if (encoded >> (256 - range) != 0) revert MaturityOverflow();\\n      encoded = ((encoded >> 32) << (32 + range));\\n      return maturity | encoded | (1 << 32);\\n    } else {\\n      uint256 range = (maturity - baseMaturity) / TSUtils.INTERVAL;\\n      if (range > 223) revert MaturityOverflow();\\n      return encoded | (1 << (32 + range));\\n    }\\n  }\\n\\n  /// @notice remove maturity from user's borrow or supplied positions.\\n  /// @param encoded encoded maturity dates where the user borrowed or supplied to.\\n  /// @param maturity maturity date to be removed.\\n  /// @return updated encoded maturity dates.\\n  function clearMaturity(uint256 encoded, uint256 maturity) internal pure returns (uint256) {\\n    if (encoded == 0 || encoded == maturity | (1 << 32)) return 0;\\n\\n    uint256 baseMaturity = encoded % (1 << 32);\\n    // if the baseMaturity is the one being cleaned\\n    if (maturity == baseMaturity) {\\n      // We're wiping 32 bytes + 1 for the old base flag\\n      uint256 packed = encoded >> 33;\\n      uint256 range = 1;\\n      while ((packed & 1) == 0 && packed != 0) {\\n        unchecked {\\n          ++range;\\n        }\\n        packed >>= 1;\\n      }\\n      encoded = ((encoded >> (32 + range)) << 32);\\n      return (maturity + (range * TSUtils.INTERVAL)) | encoded;\\n    } else {\\n      // otherwise just clear the bit\\n      return encoded & ~(1 << (32 + ((maturity - baseMaturity) / TSUtils.INTERVAL)));\\n    }\\n  }\\n\\n  /// @notice checks if the user has positions in a maturity date.\\n  /// @param encoded encoded maturity dates where the user borrowed or supplied to.\\n  /// @param maturity maturity date.\\n  /// @return true if the user has positions in the maturity date.\\n  function hasMaturity(uint256 encoded, uint256 maturity) internal pure returns (bool) {\\n    uint256 baseMaturity = encoded % (1 << 32);\\n    if (maturity < baseMaturity) return false;\\n\\n    uint256 range = (maturity - baseMaturity) / TSUtils.INTERVAL;\\n    if (range > 223) return false;\\n    return ((encoded >> 32) & (1 << range)) != 0;\\n  }\\n}\\n\\nerror InsufficientProtocolLiquidity();\\nerror MaturityOverflow();\\n\",\"keccak256\":\"0xa0220781c09053ff887bc20abf4cbb3b1334ab36ecbbea60ba2358d7a703064c\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/TSUtils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.13;\\n\\nlibrary TSUtils {\\n  enum State {\\n    NONE,\\n    INVALID,\\n    MATURED,\\n    VALID,\\n    NOT_READY\\n  }\\n\\n  uint32 public constant INTERVAL = 4 weeks;\\n\\n  /// @notice calculates how many seconds are left to a certain date.\\n  /// @param timestampFrom to calculate the difference in seconds from a date.\\n  /// @param timestampTo to calculate the difference in seconds to a date.\\n  /// @return seconds left to the date.\\n  function secondsPre(uint256 timestampFrom, uint256 timestampTo) internal pure returns (uint256) {\\n    return timestampFrom < timestampTo ? timestampTo - timestampFrom : 0;\\n  }\\n\\n  /// @notice returns a pool `time` state based on the current time, maxPools available, and INTERVAL.\\n  /// @param timestamp timestamp of the current time.\\n  /// @param maturity used as maturity date / pool id.\\n  /// @param maxPools number of pools available in the time horizon.\\n  /// @return state: if a pool is VALID, not yet available(NOT_READY), INVALID or MATURED.\\n  function getPoolState(\\n    uint256 timestamp,\\n    uint256 maturity,\\n    uint8 maxPools\\n  ) private pure returns (State) {\\n    if (maturity % INTERVAL != 0) return State.INVALID;\\n\\n    if (maturity <= timestamp) return State.MATURED;\\n\\n    if (maturity > timestamp - (timestamp % INTERVAL) + (INTERVAL * maxPools)) return State.NOT_READY;\\n\\n    return State.VALID;\\n  }\\n\\n  /// @notice verifies that a maturity is VALID, MATURED, NOT_READY or INVALID.\\n  /// @dev if expected state doesn't match the calculated one, it reverts with a custom error \\\"UnmatchedPoolState\\\".\\n  /// @param maturity timestamp of the maturity date to be verified.\\n  /// @param requiredState state required by the caller to be verified (see TSUtils.State() for description).\\n  /// @param alternativeState state required by the caller to be verified (see TSUtils.State() for description).\\n  function validateRequiredPoolState(\\n    uint8 maxFuturePools,\\n    uint256 maturity,\\n    State requiredState,\\n    State alternativeState\\n  ) internal view {\\n    State poolState = getPoolState(block.timestamp, maturity, maxFuturePools);\\n\\n    if (poolState != requiredState && poolState != alternativeState) {\\n      if (alternativeState == State.NONE) revert UnmatchedPoolState(uint8(poolState), uint8(requiredState));\\n\\n      revert UnmatchedPoolStateMultiple(uint8(poolState), uint8(requiredState), uint8(alternativeState));\\n    }\\n  }\\n}\\n\\nerror UnmatchedPoolState(uint8 state, uint8 requiredState);\\nerror UnmatchedPoolStateMultiple(uint8 state, uint8 requiredState, uint8 alternativeState);\\n\",\"keccak256\":\"0x3164707721594e1bf2d69a1aa45c43730595a0fa62ad236dfb0bc39939165cd6\",\"license\":\"GPL-3.0-or-later\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106104c35760003560e01c806370a0823111610286578063b460af941161016b578063d547741f116100e3578063ef8b30f711610097578063f618bd1e1161007c578063f618bd1e14610b5f578063fb0fc4c314610b7f578063fd8ecd1714610b8f57600080fd5b8063ef8b30f714610b31578063f3fdb15a14610b4457600080fd5b8063d905777e116100c8578063d905777e14610ab6578063dd62ed3e14610adf578063e63ab1e914610b0a57600080fd5b8063d547741f14610a9a578063d6b7494f14610aad57600080fd5b8063c6e6f5921161013a578063ce42af671161011f578063ce42af6714610a54578063ce96cb7714610a74578063d505accf14610a8757600080fd5b8063c6e6f592146109fa578063cb0f6d4814610a0d57600080fd5b8063b460af94146109cb578063b87d7d8d146109de578063ba087652146109e7578063c63d75b61461071e57600080fd5b8063a05a091a116101fe578063a31e8cb5116101cd578063b0f64c19116101b2578063b0f64c191461099c578063b2a02ff1146109a5578063b3d7f6b9146109b857600080fd5b8063a31e8cb514610976578063a9059cbb1461098957600080fd5b8063a05a091a146108f3578063a1bab44714610906578063a217fddf14610919578063a29cb7e11461092157600080fd5b80638456cb591161025557806391d148541161023a57806391d148541461089f57806394bf804d146108d857806395d89b41146108eb57600080fd5b80638456cb59146108845780638bcd40161461088c57600080fd5b806370a08231146107ff57806373d9aa2f1461081f5780637ecebe0014610832578063821993ec1461085257600080fd5b8063360c78bc116103ac5780634051cf11116103245780634dab4dc0116102f35780635b1afd67116102d85780635b1afd67146107d85780635c975abb146107e15780636e553f65146107ec57600080fd5b80634dab4dc0146107b657806355a1ac2e146107c557600080fd5b80634051cf111461073357806340eb6eb81461075e57806345227d5f146107715780634cdad506146107a357600080fd5b80633aa18d6f1161037b5780633ec045a6116103605780633ec045a6146106ef5780633f4ba83a14610716578063402d267d1461071e57600080fd5b80633aa18d6f146106d35780633c6f317f146106dc57600080fd5b8063360c78bc146106705780633644e5151461067957806336568abe1461068157806338d52e0f1461069457600080fd5b806318160ddd1161043f578063248a9ca31161040e5780632f2ff15d116103f35780632f2ff15d14610623578063313ce5671461063657806334f7d1f21461065d57600080fd5b8063248a9ca3146105ed57806328acf2cf1461061057600080fd5b806318160ddd146105965780631a5b9e621461059f5780631b0a67fe146105b257806323b872dd146105da57600080fd5b806306fdde0311610496578063095ea7b31161047b578063095ea7b31461054c5780630a28a4771461055f5780630e52dbec1461057257600080fd5b806306fdde031461052457806307a2d13a1461053957600080fd5b806301e1d114146104c857806301ffc9a7146104e357806303be1e3f146105065780630539fa8c1461051b575b600080fd5b6104d0610b98565b6040519081526020015b60405180910390f35b6104f66104f1366004615195565b610c23565b60405190151581526020016104da565b6105196105143660046151d7565b610cbc565b005b6104d060125481565b61052c610d46565b6040516104da919061521c565b6104d06105473660046151d7565b610dd4565b6104f661055a366004615282565b610e01565b6104d061056d3660046151d7565b610e6d565b60155461058490610100900460ff1681565b60405160ff90911681526020016104da565b6104d060025481565b6104d06105ad3660046152ae565b610e8d565b6105c56105c0366004615282565b611171565b604080519283526020830191909152016104da565b6104f66105e8366004615304565b611237565b6104d06105fb3660046151d7565b60009081526006602052604090206001015490565b61051961061e36600461535b565b611303565b610519610631366004615376565b6113bf565b6105847f000000000000000000000000000000000000000000000000000000000000000081565b6104d061066b3660046153a6565b6113e9565b6104d0600d5481565b6104d06115a0565b61051961068f366004615376565b6115fb565b6106bb7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016104da565b6104d060135481565b6104d06106ea3660046153a6565b611687565b6106bb7f000000000000000000000000000000000000000000000000000000000000000081565b61051961179d565b6104d061072c3660046153e7565b5060001990565b6015546107499062010000900463ffffffff1681565b60405163ffffffff90911681526020016104da565b61051961076c366004615404565b6117d2565b6105c561077f366004615376565b60076020908152600092835260408084209091529082529020805460019091015482565b6104d06107b13660046151d7565b6118ac565b6104d06706f05b59d3b2000081565b6105c56107d3366004615282565b6118b7565b6104d060115481565b60155460ff166104f6565b6104d06107fa366004615376565b6118eb565b6104d061080d3660046153e7565b60036020526000908152604090205481565b61051961082d366004615465565b6119d7565b6104d06108403660046153e7565b60056020526000908152604090205481565b6105c5610860366004615376565b60086020908152600092835260408084209091529082529020805460019091015482565b610519611a80565b61051961089a3660046153e7565b611ab2565b6104f66108ad366004615376565b60009182526006602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6104d06108e6366004615376565b611b2a565b61052c611bc6565b6104d06109013660046152ae565b611bd3565b6105196109143660046151d7565b611dd9565b6104d0600081565b61095661092f3660046151d7565b600b6020526000908152604090208054600182015460028301546003909301549192909184565b6040805194855260208501939093529183015260608201526080016104da565b6104d06109843660046154db565b611e67565b6104f6610997366004615282565b6122fb565b6104d060165481565b6105196109b3366004615304565b6123be565b6104d06109c63660046151d7565b61247e565b6104d06109d936600461551a565b61249d565b6104d0600e5481565b6104d06109f536600461551a565b61254c565b6104d0610a083660046151d7565b612610565b601554610a3390660100000000000090046fffffffffffffffffffffffffffffffff1681565b6040516fffffffffffffffffffffffffffffffff90911681526020016104da565b6104d0610a623660046153e7565b60096020526000908152604090205481565b6104d0610a823660046153e7565b612630565b610519610a9536600461555c565b612652565b610519610aa8366004615376565b6128fc565b6104d060105481565b6104d0610ac43660046153e7565b6001600160a01b031660009081526003602052604090205490565b6104d0610aed3660046155ca565b600460209081526000928352604080842090915290825290205481565b6104d07f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b6104d0610b3f3660046151d7565b612921565b600f546106bb9064010000000090046001600160a01b031681565b6104d0610b6d3660046153e7565b600a6020526000908152604090205481565b600f546107499063ffffffff1681565b6104d0600c5481565b601554600090610100900460ff16818080806224ea0042600b60205206420390506224ea0085028101815b818111610c095780600052604060002060028101549450600381015495505084811115610bff57610bfa8442879003878403612b55565b860195505b6224ea0001610bc3565b50610c12612b74565b856016540101965050505050505090565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b000000000000000000000000000000000000000000000000000000001480610cb657507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b6000610cc781612c10565b6702c68af0bb140000821115610d09576040517f613970e000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60118290556040518281527fc424e64f100ae550a498ed25323459966a5c0b91426b22e1d62d9a5ec7d01e0a906020015b60405180910390a15050565b60008054610d5390615627565b80601f0160208091040260200160405190810160405280929190818152602001828054610d7f90615627565b8015610dcc5780601f10610da157610100808354040283529160200191610dcc565b820191906000526020600020905b815481529060010190602001808311610daf57829003601f168201915b505050505081565b6002546000908015610df857610df3610deb610b98565b849083612b55565b610dfa565b825b9392505050565b3360008181526004602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610e5c9086815260200190565b60405180910390a350600192915050565b6002546000908015610df857610df381610e85610b98565b859190612c1a565b6000601454600114610ee65760405162461bcd60e51b815260206004820152600a60248201527f5245454e5452414e43590000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b600260145560155460ff1615610f3e5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610edd565b601554610f5790610100900460ff168760036000612c48565b601654600090610f6a8885898985612db1565b9093509150336001600160a01b03851614610fe6576001600160a01b03841660009081526004602090815260408083203384529091529020546000198114610fe457610fb584610e6d565b610fbf90826156a9565b6001600160a01b03861660009081526004602090815260408083203384529091529020555b505b60408051828152602081018490527fd2297b31b9dc44ba485ec9ae19f75c6d336e647a6040455c7f4c429c1f9cf568910160405180910390a161102982826156c0565b6016556040517f144348d50000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b0385811660248301527f0000000000000000000000000000000000000000000000000000000000000000169063144348d590604401600060405180830381600087803b1580156110ae57600080fd5b505af11580156110c2573d6000803e3d6000fd5b506110fc9250506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016905086896130f4565b6001600160a01b03808516908616897f66866b472f27d55d69496091bbd651907b2fb1041b3eeaca6e565ae5b5af4013338b611138818a6156a9565b604080516001600160a01b0390941684526020840192909252908201526060015b60405180910390a45050600160145595945050505050565b6000806000198303611220576001600160a01b038416600090815260096020526040812054906111a6640100000000836156d8565b9050602082901c60005b60e0811015611217576001811b821615611207576000806111e78a6111d86224ea00866156ec565b6111e290886156c0565b61319f565b90925090506111f682896156c0565b975061120281886156c0565b965050505b600190810190811b8210156111b0575b50505050611230565b61122a848461319f565b90925090505b9250929050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639cbda20e30866112738661247e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b039384166004820152929091166024830152604482015260640160006040518083038186803b1580156112d857600080fd5b505afa1580156112ec573d6000803e3d6000fd5b505050506112fb84848461321f565b949350505050565b600061130e81612c10565b60e08260ff161180611321575060ff8216155b15611358576040517f613970e000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b601580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1661010060ff8516908102919091179091556040519081527f23c0170203096819aed8a13739fe91ce445ec92a7e2aa228081b5e45ee582c8090602001610d3a565b6000828152600660205260409020600101546113da81612c10565b6113e48383613311565b505050565b600060145460011461143d5760405162461bcd60e51b815260206004820152600a60248201527f5245454e5452414e4359000000000000000000000000000000000000000000006044820152606401610edd565b600260145560155460ff16156114955760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610edd565b6015546114ae90610100900460ff168660036000612c48565b60006114bc868487876133d1565b6016546040805182815260208101849052939550919350917fd2297b31b9dc44ba485ec9ae19f75c6d336e647a6040455c7f4c429c1f9cf568910160405180910390a161150982826156c0565b6016556001600160a01b03841633887fd9900507c64720c1a5e11858a42769b599616268b832495aa6afe8b9dc566e768961154481896156a9565b6040805192835260208301919091520160405180910390a46115916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308961363a565b50506001601455949350505050565b60007f000000000000000000000000000000000000000000000000000000000000000046146115d6576115d16136e3565b905090565b507f000000000000000000000000000000000000000000000000000000000000000090565b6001600160a01b03811633146116795760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610edd565b611683828261377d565b5050565b60006014546001146116db5760405162461bcd60e51b815260206004820152600a60248201527f5245454e5452414e4359000000000000000000000000000000000000000000006044820152606401610edd565b600260145560155460ff16156117335760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610edd565b60155461174c90610100900460ff168660036002612c48565b6117588585858561381e565b5090506117906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308461363a565b6001601455949350505050565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a6117c781612c10565b6117cf61390f565b50565b60006117dd81612c10565b673782dace9d900000826fffffffffffffffffffffffffffffffff161115611831576040517f613970e000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b601580547fffffffffffffffffffff00000000000000000000000000000000ffffffffffff1666010000000000006fffffffffffffffffffffffffffffffff8516908102919091179091556040519081527f23b551d40eff810596d9326aa0c01a3f4e9399def252648a5b47a2cf032443c790602001610d3a565b6000610cb682610dd4565b6000806000806118c78686611171565b915091506118d486612630565b6118de82846156c0565b9350935050509250929050565b60006118f683612921565b9050806000036119485760405162461bcd60e51b815260206004820152600b60248201527f5a45524f5f5348415245530000000000000000000000000000000000000000006044820152606401610edd565b61197d6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308661363a565b61198782826139c9565b60408051848152602081018390526001600160a01b0384169133917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7910160405180910390a3610cb68382613a35565b60006119e281612c10565b8151670de0b6b3a76400001080611a045750670de0b6b3a76400008260200151115b15611a3b576040517f613970e000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81516012819055602080840151601381905560408051938452918301527fd09fee08a2915f9ac9a77197b21a3e275d34ec9542f569eb15b95ce8f7fe28089101610d3a565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a611aaa81612c10565b6117cf613b46565b6000611abd81612c10565b600f80547fffffffffffffffff0000000000000000000000000000000000000000ffffffff166401000000006001600160a01b038516908102919091179091556040517f7902cd1307c545e3f5782172612372bf997a93698917ced12b2f83d86e347d0c90600090a25050565b6000611b358361247e565b9050611b6c6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308461363a565b611b7682846139c9565b60408051828152602081018590526001600160a01b0384169133917fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7910160405180910390a3610cb68184613a35565b60018054610d5390615627565b6000601454600114611c275760405162461bcd60e51b815260206004820152600a60248201527f5245454e5452414e4359000000000000000000000000000000000000000000006044820152606401610edd565b60026014556000859003611c67576040517fb8cb621900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b601554611c8090610100900460ff168760036002612c48565b601654600090611c938885898985613bec565b9093509150336001600160a01b03851614611d0f576001600160a01b03841660009081526004602090815260408083203384529091529020546000198114611d0d57611cde84610e6d565b611ce890826156a9565b6001600160a01b03861660009081526004602090815260408083203384529091529020555b505b60408051828152602081018490527fd2297b31b9dc44ba485ec9ae19f75c6d336e647a6040455c7f4c429c1f9cf568910160405180910390a1611d5282826156c0565b601655611d896001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001686856130f4565b60408051338152602081018990529081018490526001600160a01b0380861691908716908a907fe57dbac0e7c42ad5f3b0fadb9c065565377cf771054fca70d35c96e01f9ec53c90606001611159565b6000611de481612c10565b6486cf16de00821180611dfb5750641ac688be0082105b15611e32576040517f613970e000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60108290556040518281527fdb0ebfb2503f7c16b45577ebbf6c7d6b99b6e8aaf6652b156e36d5d6654a3a5e90602001610d3a565b6000601454600114611ebb5760405162461bcd60e51b815260206004820152600a60248201527f5245454e5452414e4359000000000000000000000000000000000000000000006044820152606401610edd565b600260145560155460ff1615611f135760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610edd565b6040517f505cd0780000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03838116602483015233604483015286811660648301527f0000000000000000000000000000000000000000000000000000000000000000169063505cd0789060840160006040518083038186803b158015611fa157600080fd5b505afa158015611fb5573d6000803e3d6000fd5b505050506000611fc786600019611171565b509050611fe585611fe06706f05b59d3b2000084613efe565b613f13565b6001600160a01b038716600090815260096020526040812054919650612010640100000000836156d8565b9050602082901c60005b60e0817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16101561210d5760017bffffffffffffffffffffffffffffffffffffffffffffffffffffffff82161b8216156120d9576000806120ad61207d6224ea008561570b565b6120a5907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16876156c0565b8c8c8f61381e565b90925090506120bc82896156c0565b97506120c8818c6156a9565b9a506120d4828b6156a9565b995050505b881561210d576001908101907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff82161b82101561201a575b506040517f5efadbd10000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038781166024830152604482018790526000917f000000000000000000000000000000000000000000000000000000000000000090911690635efadbd190606401602060405180830381865afa15801561219f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121c3919061574f565b9050306001600160a01b038816036121e6576121e130338c84613f29565b612268565b6040517fb2a02ff10000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b038b811660248301526044820183905288169063b2a02ff190606401600060405180830381600087803b15801561224f57600080fd5b505af1158015612263573d6000803e3d6000fd5b505050505b60408051878152602081018390526001600160a01b03808a1692908d169133917f298637f684da70674f26509b10f07ec2fbc77a335ab1e7d6215a4b2484d8bb52910160405180910390a46122e86001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001633308961363a565b5050600160145550919695505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639cbda20e30336123378661247e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b039384166004820152929091166024830152604482015260640160006040518083038186803b15801561239c57600080fd5b505afa1580156123b0573d6000803e3d6000fd5b50505050610dfa83836140ff565b6014546001146124105760405162461bcd60e51b815260206004820152600a60248201527f5245454e5452414e4359000000000000000000000000000000000000000000006044820152606401610edd565b600260145560155460ff16156124685760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610edd565b61247433848484613f29565b5050600160145550565b6002546000908015610df857610df3612495610b98565b849083612c1a565b6040517f9cbda20e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038281166024830152604482018590526000917f000000000000000000000000000000000000000000000000000000000000000090911690639cbda20e9060640160006040518083038186803b15801561252957600080fd5b505afa15801561253d573d6000803e3d6000fd5b505050506112fb848484614177565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639cbda20e30846125888861247e565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b039384166004820152929091166024830152604482015260640160006040518083038186803b1580156125ed57600080fd5b505afa158015612601573d6000803e3d6000fd5b505050506112fb848484614285565b6002546000908015610df857610df381612628610b98565b859190612b55565b6001600160a01b038116600090815260036020526040812054610cb690610dd4565b428410156126a25760405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f455850495245440000000000000000006044820152606401610edd565b600060016126ae6115a0565b6001600160a01b038a811660008181526005602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98184015280840194909452938d166060840152608083018c905260a083019390935260c08083018b90528151808403909101815260e0830190915280519201919091207f190100000000000000000000000000000000000000000000000000000000000061010083015261010282019290925261012281019190915261014201604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa1580156127f3573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001519150506001600160a01b038116158015906128475750876001600160a01b0316816001600160a01b0316145b6128935760405162461bcd60e51b815260206004820152600e60248201527f494e56414c49445f5349474e45520000000000000000000000000000000000006044820152606401610edd565b6001600160a01b0390811660009081526004602090815260408083208a8516808552908352928190208990555188815291928a16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050505050565b60008281526006602052604090206001015461291781612c10565b6113e4838361377d565b6000610cb682612610565b6060600061293b8360026156ec565b6129469060026156c0565b67ffffffffffffffff81111561295e5761295e615436565b6040519080825280601f01601f191660200182016040528015612988576020820181803683370190505b5090507f3000000000000000000000000000000000000000000000000000000000000000816000815181106129bf576129bf615768565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110612a2257612a22615768565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000612a5e8460026156ec565b612a699060016156c0565b90505b6001811115612b06577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110612aaa57612aaa615768565b1a60f81b828281518110612ac057612ac0615768565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93612aff81615797565b9050612a6c565b508315610dfa5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610edd565b828202811515841585830485141716612b6d57600080fd5b0492915050565b6015546000908190612b929062010000900463ffffffff16426156a9565b905080600003612ba457600091505090565b601554612c0a908290612bf690612bc7906224ea0090610100900460ff166157ae565b601554660100000000000090046fffffffffffffffffffffffffffffffff169063ffffffff90811690613efe16565b612c0090846156c0565b600d549190612b55565b91505090565b6117cf81336143e3565b828202811515841585830485141716612c3257600080fd5b6001826001830304018115150290509392505050565b6000612c55428587614481565b9050826004811115612c6957612c696157d1565b816004811115612c7b57612c7b6157d1565b14158015612cab5750816004811115612c9657612c966157d1565b816004811115612ca857612ca86157d1565b14155b15612daa576000826004811115612cc457612cc46157d1565b03612d2c57806004811115612cdb57612cdb6157d1565b836004811115612ced57612ced6157d1565b6040517f34e2603a00000000000000000000000000000000000000000000000000000000815260ff928316600482015291166024820152604401610edd565b806004811115612d3e57612d3e6157d1565b836004811115612d5057612d506157d1565b836004811115612d6257612d626157d1565b6040517f537c4e5100000000000000000000000000000000000000000000000000000000815260ff938416600482015291831660248301529091166044820152606401610edd565b5050505050565b6040805160c08101825260006080820181815260a083018290528252602082018190529181018290526060810182905281906000888152600b60205260409020612dfc818a426144fc565b9250612e0785614575565b600f5481546001830154600e546040517f7b5c15ef000000000000000000000000000000000000000000000000000000008152600481018e9052426024820152604481018c90526064810193909352608483019190915260a4820152612eca9164010000000090046001600160a01b031690637b5c15ef9060c401602060405180830381865afa158015612e9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ec3919061574f565b8890613efe565b60208301819052612edb90886156c0565b600c54909450612ef788612eef83896156a9565b84919061463f565b612f0190826156c0565b600c819055601154909150612f2990612f2290670de0b6b3a76400006156a9565b8790613efe565b811115612f62576040517fe5b22fbf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b86851115612f9c576040517ffa6ad35500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008a81526008602090815260408083206001600160a01b038d1684528252808320815180830190925280548252600101549181019190915280855251900361301c576001600160a01b038916600090815260096020526040902054613002908b6146be565b6001600160a01b038a166000908152600960205260409020555b613033836020015161302d846147eb565b8a61480a565b606085018190526040850191909152600d80546000906130549084906156c0565b909155505060408301516002830180546000906130729084906156c0565b9091555050604080518082019091528351518190613091908b906156c0565b815260200184602001518560000151602001516130ae91906156c0565b905260009a8b52600860209081526040808d206001600160a01b03909c168d529a815299909a208a51815599909801516001909901989098555090969095509350505050565b60006040517fa9059cbb000000000000000000000000000000000000000000000000000000006000528360045282602452602060006044600080895af13d15601f3d11600160005114161716915060006060528060405250806131995760405162461bcd60e51b815260206004820152600f60248201527f5452414e534645525f4641494c454400000000000000000000000000000000006044820152606401610edd565b50505050565b60008181526008602090815260408083206001600160a01b038616845282528083208151808301909252805480835260019091015492820183905283926131e5916156c0565b925060006131f38542614850565b90508015613216576132136010548261320c91906156ec565b8590613efe565b92505b50509250929050565b6001600160a01b0383166000908152600460209081526040808320338452909152812054600019811461327b5761325683826156a9565b6001600160a01b03861660009081526004602090815260408083203384529091529020555b6001600160a01b038516600090815260036020526040812080548592906132a39084906156a9565b90915550506001600160a01b03808516600081815260036020526040908190208054870190555190918716907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906132fe9087815260200190565b60405180910390a3506001949350505050565b60008281526006602090815260408083206001600160a01b038516845290915290205460ff166116835760008281526006602090815260408083206001600160a01b0385168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905561338d3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000848152600b6020526040812081906133ec8188426144fc565b600f54909250600090819064010000000090046001600160a01b0316635e8e0ebe613416856147eb565b60028601546040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260048101929092526024820152604481018a90526064016040805180830381865afa15801561347a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061349e9190615800565b90925090506134ad82886156c0565b9450858510156134e9576040517ffa6ad35500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6134f3838861486a565b600c600082825461350491906156a9565b90915550613514905081836156c0565b83600201600082825461352791906156a9565b9250508190555080600d600082825461354091906156c0565b909155505060008981526007602090815260408083206001600160a01b038c1684528252808320815180830190925280548083526001909101549282019290925291036135c4576001600160a01b0389166000908152600a60205260409020546135aa908b6146be565b6001600160a01b038a166000908152600a60205260409020555b60405180604001604052808983600001516135df91906156c0565b81526020018483602001516135f491906156c0565b905260009a8b52600760209081526040808d206001600160a01b03909c168d529a815299909a208a51815599909801516001909901989098555091969095509350505050565b60006040517f23b872dd000000000000000000000000000000000000000000000000000000006000528460045283602452826044526020600060646000808a5af13d15601f3d1160016000511416171691506000606052806040525080612daa5760405162461bcd60e51b815260206004820152601460248201527f5452414e534645525f46524f4d5f4641494c45440000000000000000000000006044820152606401610edd565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60006040516137159190615824565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b60008281526006602090815260408083206001600160a01b038516845290915290205460ff16156116835760008281526006602090815260408083206001600160a01b038516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000808460000361385b576040517f685e923500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000613869878588886148aa565b6016546040805182815260208101849052949750929550909350917fd2297b31b9dc44ba485ec9ae19f75c6d336e647a6040455c7f4c429c1f9cf568910160405180910390a16138b982826156c0565b60165560408051858152602081018590526001600160a01b0387169133918b917ff17fce321dd9fb005136a80c0bfb3789e455b7a70be9eb8922f1ad20a80d1a33910160405180910390a4505094509492505050565b60155460ff166139615760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610edd565b601580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b80600260008282546139db91906156c0565b90915550506001600160a01b0382166000818152600360209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91015b60405180910390a35050565b60155460ff1615613a885760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610edd565b601654613a9481614575565b6000613a9e612b74565b601580547fffffffffffffffffffffffffffffffffffffffffffffffffffff00000000ffff16620100004263ffffffff1602179055600d80549192508291600090613aea9084906156a9565b909155505060408051838152602081018390527fd2297b31b9dc44ba485ec9ae19f75c6d336e647a6040455c7f4c429c1f9cf568910160405180910390a183613b3382846156c0565b613b3d91906156c0565b60165550505050565b60155460ff1615613b995760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610edd565b601580547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586139ac3390565b6000858152600b602052604081208190613c078189426144fc565b60008981526007602090815260408083206001600160a01b038c168452825291829020825180840190935280548084526001909101549183018290529294509091613c5291906156c0565b871115613c6d5760208101518151613c6a91906156c0565b96505b88421015613d5a57613c7e85614575565b600f5482546001840154600e546040517f7b5c15ef000000000000000000000000000000000000000000000000000000008152600481018e9052426024820152604481018c90526064810193909352608483019190915260a4820152613d539164010000000090046001600160a01b031690637b5c15ef9060c401602060405180830381865afa158015613d16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d3a919061574f565b613d4c90670de0b6b3a76400006156c0565b8890614bb8565b9350613d5e565b8693505b85841015613d98576040517ffa6ad35500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604080518082019091528151815260208083015190820152613dd490613dbe9089614bcd565b51600c54613dcc90886156a9565b849190614c15565b600c6000828254613de591906156c0565b909155506000905080613e0a613dfb878b6156a9565b613e04866147eb565b8861480a565b9150915081846002016000828254613e2291906156c0565b9250508190555080600d6000828254613e3b91906156c0565b90915550613e4b9050838a614c98565b5060208301518351613e5d91906156c0565b600003613ebf5760008b81526007602090815260408083206001600160a01b038e1684528252808320838155600101839055600a909152902054613ea1908c614d01565b6001600160a01b038b166000908152600a6020526040902055613ef0565b60008b81526007602090815260408083206001600160a01b038e168452825290912084518155908401516001909101555b505050509550959350505050565b6000610dfa8383670de0b6b3a7640000612b55565b6000818310613f225781610dfa565b5090919050565b80600003613f63576040517fb8cb621900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517feafe967b0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038581166024830152848116604483015283811660648301527f0000000000000000000000000000000000000000000000000000000000000000169063eafe967b9060840160006040518083038186803b158015613ff357600080fd5b505afa158015614007573d6000803e3d6000fd5b50505050600061401682610e6d565b90506140228282614dcf565b61402c8382614ec8565b60408051838152602081018390526001600160a01b03808616929087169133917ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db910160405180910390a46140ab6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001685846130f4565b826001600160a01b0316846001600160a01b03167f1f9fff5fe5a36583a0ece4969d1292bc264a38a717ba45feb449f91a21ba1ecb846040516140f091815260200190565b60405180910390a35050505050565b336000908152600360205260408120805483919083906141209084906156a9565b90915550506001600160a01b038316600081815260036020526040908190208054850190555133907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90610e5c9086815260200190565b600061418284610e6d565b9050336001600160a01b038316146141f2576001600160a01b038216600090815260046020908152604080832033845290915290205460001981146141f0576141cb82826156a9565b6001600160a01b03841660009081526004602090815260408083203384529091529020555b505b6141fc8482614dcf565b6142068282614ec8565b60408051858152602081018390526001600160a01b03808516929086169133917ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db910160405180910390a4610dfa6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001684866130f4565b6000336001600160a01b038316146142f5576001600160a01b038216600090815260046020908152604080832033845290915290205460001981146142f3576142ce85826156a9565b6001600160a01b03841660009081526004602090815260408083203384529091529020555b505b6142fe846118ac565b9050806000036143505760405162461bcd60e51b815260206004820152600b60248201527f5a45524f5f4153534554530000000000000000000000000000000000000000006044820152606401610edd565b61435a8185614dcf565b6143648285614ec8565b60408051828152602081018690526001600160a01b03808516929086169133917ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db910160405180910390a4610dfa6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001684836130f4565b60008281526006602090815260408083206001600160a01b038516845290915290205460ff1661168357614421816001600160a01b0316601461292c565b61442c83602061292c565b60405160200161443d9291906158f6565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529082905262461bcd60e51b8252610edd9160040161521c565b60006144906224ea00846156d8565b1561449d57506001610dfa565b8383116144ac57506002610dfa565b6144bc60ff83166224ea006157ae565b63ffffffff166144cf6224ea00866156d8565b6144d990866156a9565b6144e391906156c0565b8311156144f257506004610dfa565b5060039392505050565b6003830154600090838103614515576000915050610dfa565b600061452a826145258787613f13565b614850565b905060006145388387614850565b90506145448686613f13565b60038801556002870154614559818484612b55565b945061456585826156a9565b6002890155505050509392505050565b6000600e5482106145885760125461458c565b6013545b600f549091506000906145c1906145a99063ffffffff16426156a9565b6145b390846156ec565b6145bc90615977565b614f3c565b6145d390670de0b6b3a76400006159af565b90506145df8184613efe565b6145fd6145f483670de0b6b3a76400006156a9565b600e5490613efe565b61460791906156c0565b600e555050600f80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000164263ffffffff1617905550565b82546000908161464f85836156c0565b90506000614661838860010154615161565b905061466d8183613f13565b61467790836156a9565b9350848411156146b3576040517f016a0d6800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b509094559392505050565b6000826000036146d657506401000000008117610cb6565b60006146e7640100000000856156d8565b90508083101561477a5760006224ea0061470185846156a9565b61470b9190615a23565b9050614719816101006156a9565b85901c15614753576040517fa4f3107c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61475e8160206156c0565b602086901c901b94508484176401000000001792505050610cb6565b60006224ea0061478a83866156a9565b6147949190615a23565b905060df8111156147d1576040517fa4f3107c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6147dc8160206156c0565b6001901b851792505050610cb6565b80546001820154600091906148008282613f13565b6112fb90836156a9565b6000808215614837576148326148208585613f13565b61482a90856156a9565b869085612b55565b61483a565b60005b905061484681866156a9565b9150935093915050565b6000818310614860576000610dfa565b610dfa83836156a9565b815460018301546000919061487f84826156c0565b60018601556148a16148918383613f13565b61489b90846156a9565b85613f13565b95945050505050565b6000848152600b60205260408120819081906148c78189426144fc565b60008981526008602090815260408083206001600160a01b038c168452825291829020825180840190935280548084526001909101549183018290529294509091614918918991611fe091906156c0565b6040805180820190915282518152602080840151908201529094506000906149409086614bcd565b905089421015614a4f57600f54600090819064010000000090046001600160a01b0316635e8e0ebe614971876147eb565b6002880154865160405160e085901b7fffffffff000000000000000000000000000000000000000000000000000000001681526004810193909352602483019190915260448201526064016040805180830381865afa1580156149d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149fc9190615800565b9092509050614a0b81836156c0565b856002016000828254614a1e91906156a9565b90915550614a2e905082886156a9565b975080600d6000828254614a4291906156c0565b90915550614a9e92505050565b601054614a7190614a608c426156a9565b614a6a91906156ec565b8690613efe565b614a7b90866156c0565b9550614a8785876156a9565b600d6000828254614a9891906156c0565b90915550505b86861115614ad8576040517ffa6ad35500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8051614ae5908490615171565b600c6000828254614af691906156a9565b90915550614b0690508286614c98565b5060208201518251614b1891906156c0565b600003614b7a5760008a81526008602090815260408083206001600160a01b038d16845282528083208381556001018390556009909152902054614b5c908b614d01565b6001600160a01b038a16600090815260096020526040902055614bab565b60008a81526008602090815260408083206001600160a01b038d168452825290912083518155908301516001909101555b5050509450945094915050565b6000610dfa83670de0b6b3a764000084612b55565b604080518082019091526000808252602082015282516020840151600091614bf99161262890826156c0565b8085529050614c0881846156a9565b6020850152509192915050565b825460018401546000919082614c2b86836156a9565b9050614c378184613f13565b614c418385613f13565b614c4b91906156a9565b935084841115614c87576040517f016a0d6800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600190960195909555509392505050565b604080518082019091526000808252602082015282516020840151600091614cc49161262890826156c0565b90508084600001818151614cd891906156a9565b905250614ce581846156a9565b84602001818151614cf691906156a9565b905250929392505050565b6000821580614d165750816401000000001783145b15614d2357506000610cb6565b6000614d34640100000000856156d8565b9050808303614d9d57602184901c60015b60018216158015614d5557508115155b15614d6657600191821c9101614d45565b6020614d7282826156c0565b9690961c90951b9485614d886224ea00836156ec565b614d9290876156c0565b179350505050610cb6565b6224ea00614dab82856156a9565b614db59190615a23565b614dc09060206156c0565b6001901b198416915050610cb6565b601654614ddb81614575565b6000614de5612b74565b601580547fffffffffffffffffffffffffffffffffffffffffffffffffffff00000000ffff16620100004263ffffffff1602179055600d80549192508291600090614e319084906156a9565b909155505060408051838152602081018390527fd2297b31b9dc44ba485ec9ae19f75c6d336e647a6040455c7f4c429c1f9cf568910160405180910390a183614e7a82846156c0565b614e8491906156a9565b6016819055600c54909250821015613199576040517f016a0d6800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600160a01b03821660009081526003602052604081208054839290614ef09084906156a9565b90915550506002805482900390556040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001613a29565b60007ffffffffffffffffffffffffffffffffffffffffffffffffdb731c958f34d94c18213614f6d57506000919050565b680755bf798b4a1bf1e58212614fc55760405162461bcd60e51b815260206004820152600c60248201527f4558505f4f564552464c4f5700000000000000000000000000000000000000006044820152606401610edd565b6503782dace9d9604e83901b059150600060606bb17217f7d1cf79abc9e3b39884821b056b80000000000000000000000001901d6bb17217f7d1cf79abc9e3b39881029093037fffffffffffffffffffffffffffffffffffffffdbf3ccf1604d263450f02a550481018102606090811d6d0277594991cfc85f6e2461837cd9018202811d7fffffffffffffffffffffffffffffffffffffe5adedaa1cb095af9e4da10e363c018202811d6db1bbb201f443cf962f1a1d3db4a5018202811d7ffffffffffffffffffffffffffffffffffffd38dc772608b0ae56cce01296c0eb018202811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765084018402831d9081019084017ffffffffffffffffffffffffffffffffffffffe2c69812cf03b0763fd454a8f7e010290911d6e0587f503bb6ea29d25fcb7401964500190910279d835ebba824c98fb31b83b2ca45c000000000000000000000000010574029d9dc38563c32e5c2f6dc192ee70ef65f9978af30260c3939093039290921c92915050565b600081831015613f225781610dfa565b815460018301546000919061518684836156a9565b85556148a16148918383613f13565b6000602082840312156151a757600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610dfa57600080fd5b6000602082840312156151e957600080fd5b5035919050565b60005b8381101561520b5781810151838201526020016151f3565b838111156131995750506000910152565b602081526000825180602084015261523b8160408501602087016151f0565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6001600160a01b03811681146117cf57600080fd5b6000806040838503121561529557600080fd5b82356152a08161526d565b946020939093013593505050565b600080600080600060a086880312156152c657600080fd5b85359450602086013593506040860135925060608601356152e68161526d565b915060808601356152f68161526d565b809150509295509295909350565b60008060006060848603121561531957600080fd5b83356153248161526d565b925060208401356153348161526d565b929592945050506040919091013590565b803560ff8116811461535657600080fd5b919050565b60006020828403121561536d57600080fd5b610dfa82615345565b6000806040838503121561538957600080fd5b82359150602083013561539b8161526d565b809150509250929050565b600080600080608085870312156153bc57600080fd5b84359350602085013592506040850135915060608501356153dc8161526d565b939692955090935050565b6000602082840312156153f957600080fd5b8135610dfa8161526d565b60006020828403121561541657600080fd5b81356fffffffffffffffffffffffffffffffff81168114610dfa57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006040828403121561547757600080fd5b6040516040810181811067ffffffffffffffff821117156154c1577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604052823581526020928301359281019290925250919050565b600080600080608085870312156154f157600080fd5b84356154fc8161526d565b9350602085013592506040850135915060608501356153dc8161526d565b60008060006060848603121561552f57600080fd5b8335925060208401356155418161526d565b915060408401356155518161526d565b809150509250925092565b600080600080600080600060e0888a03121561557757600080fd5b87356155828161526d565b965060208801356155928161526d565b955060408801359450606088013593506155ae60808901615345565b925060a0880135915060c0880135905092959891949750929550565b600080604083850312156155dd57600080fd5b82356155e88161526d565b9150602083013561539b8161526d565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600181811c9082168061563b57607f821691505b602082108103615674577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000828210156156bb576156bb61567a565b500390565b600082198211156156d3576156d361567a565b500190565b6000826156e7576156e76155f8565b500690565b60008160001904831182151516156157065761570661567a565b500290565b60007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff808316818516818304811182151516156157465761574661567a565b02949350505050565b60006020828403121561576157600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000816157a6576157a661567a565b506000190190565b600063ffffffff808316818516818304811182151516156157465761574661567a565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000806040838503121561581357600080fd5b505080516020909101519092909150565b600080835481600182811c91508083168061584057607f831692505b60208084108203615878577f4e487b710000000000000000000000000000000000000000000000000000000086526022600452602486fd5b81801561588c57600181146158bb576158e8565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff008616895284890196506158e8565b60008a81526020902060005b868110156158e05781548b8201529085019083016158c7565b505084890196505b509498975050505050505050565b7f416363657373436f6e74726f6c3a206163636f756e742000000000000000000081526000835161592e8160178501602088016151f0565b7f206973206d697373696e6720726f6c6520000000000000000000000000000000601791840191820152835161596b8160288401602088016151f0565b01602801949350505050565b60007f800000000000000000000000000000000000000000000000000000000000000082036159a8576159a861567a565b5060000390565b6000808312837f8000000000000000000000000000000000000000000000000000000000000000018312811516156159e9576159e961567a565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018313811615615a1d57615a1d61567a565b50500390565b600082615a3257615a326155f8565b50049056fea2646970667358221220bfa74d8916b18970c972bf66722b4b1aa1ee2bc29409eb5755ddb61bd1219a6364736f6c634300080d0033",
  "devdoc": {
    "events": {
      "AccumulatedEarningsSmoothFactorSet(uint128)": {
        "params": {
          "newAccumulatedEarningsSmoothFactor": "factor represented with 1e18 decimals."
        }
      },
      "AssetSeized(address,address,uint256)": {
        "params": {
          "assets": "amount seized of the collateral.",
          "borrower": "address which had the original debt.",
          "liquidator": "address which seized this collateral."
        }
      },
      "BorrowAtMaturity(uint256,address,address,address,uint256,uint256)": {
        "params": {
          "assets": "amount of the asset that were borrowed.",
          "borrower": "address which will be repaying the borrowed assets.",
          "caller": "address which borrowed the asset.",
          "fee": "extra amount that will need to be paid at maturity.",
          "maturity": "maturity in which the user will have to repay the loan.",
          "receiver": "address that received the borrowed assets."
        }
      },
      "DepositAtMaturity(uint256,address,address,uint256,uint256)": {
        "params": {
          "assets": "amount of the asset that were deposited.",
          "caller": "address which deposited the assets.",
          "fee": "is the extra amount that it will be collected at maturity.",
          "maturity": "maturity in which the user will be able to collect his deposit + his fee.",
          "owner": "address that will be able to withdraw the deposited assets."
        }
      },
      "LiquidateBorrow(address,address,uint256,address,uint256)": {
        "params": {
          "assets": "amount of the asset that were repaid.",
          "borrower": "address which had the original debt.",
          "collateralFixedLender": "address of the asset that were seized by the liquidator.",
          "receiver": "address which repaid the previously borrowed amount.",
          "seizedAssets": "amount seized of the collateral."
        }
      },
      "MaxFuturePoolsSet(uint256)": {
        "params": {
          "newMaxFuturePools": "represented with 0 decimals."
        }
      },
      "RepayAtMaturity(uint256,address,address,uint256,uint256)": {
        "params": {
          "assets": "amount that was repaid.",
          "borrower": "address which had the original debt.",
          "caller": "address which repaid the previously borrowed amount.",
          "maturity": "maturity where the user repaid its borrowed amounts.",
          "positionAssets": "amount of the debt that was covered in this repayment (penalties could have been repaid)."
        }
      },
      "SmartPoolEarningsAccrued(uint256,uint256)": {
        "params": {
          "earnings": "new smart pool earnings, denominated in assets (underlying).",
          "previousAssets": "previous balance of the smart pool, denominated in assets (underlying)."
        }
      },
      "WithdrawAtMaturity(uint256,address,address,address,uint256,uint256)": {
        "params": {
          "assets": "amount of the asset that were withdrawn.",
          "assetsDiscounted": "amount of the asset that were deposited (in case of early withdrawal).",
          "caller": "address which withdraw the asset.",
          "maturity": "maturity where the user collected its deposits.",
          "owner": "address which had the assets withdrawn.",
          "receiver": "address which will be collecting the assets."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "borrowAtMaturity(uint256,uint256,uint256,address,address)": {
        "details": "Borrows a certain amount from a maturity date.",
        "params": {
          "assets": "amount to send to borrower.",
          "borrower": "address that will repay the borrowed assets.",
          "maturity": "maturity date for repayment.",
          "maxAssetsAllowed": "maximum amount of debt that the user is willing to accept.",
          "receiver": "address that will receive the borrowed assets."
        }
      },
      "depositAtMaturity(uint256,uint256,uint256,address)": {
        "params": {
          "assets": "amount to receive from the msg.sender.",
          "maturity": "maturity date / pool ID.",
          "minAssetsRequired": "minimum amount of assets required by the depositor for the transaction to be accepted.",
          "receiver": "address that will be able to withdraw the deposited assets."
        },
        "returns": {
          "maturityAssets": "total amount of assets (principal + fee) to be withdrawn at maturity."
        }
      },
      "getAccountBorrows(address,uint256)": {
        "details": "Gets all borrows for an account in certain maturity (or MATURITY_ALL).",
        "params": {
          "maturity": "maturity where the borrow is taking place. MATURITY_ALL returns all borrows.",
          "who": "account to return status snapshot in the specified maturity date."
        },
        "returns": {
          "sumPenalties": "the total penalties for late repayment in all maturities.",
          "sumPositions": "the total amount of borrows in user position."
        }
      },
      "getAccountSnapshot(address,uint256)": {
        "params": {
          "maturity": "maturity. `PoolLib.MATURITY_ALL` (`type(uint256).max`) for all maturities.",
          "who": "wallet to return status snapshot in the specified maturity date."
        },
        "returns": {
          "_0": "the amount the user deposited to the smart pool and the total money he owes from maturities."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "liquidate(address,uint256,uint256,address)": {
        "details": "Msg.sender liquidates borrower's position(s) and repays a certain amount of debt for multiple maturities, seizing a part of borrower's collateral.",
        "params": {
          "borrower": "wallet that has an outstanding debt across all maturities.",
          "collateralFixedLender": "fixedLender from which the collateral will be seized to give the liquidator.",
          "maxAssetsAllowed": "maximum amount of debt that the liquidator is willing to accept.",
          "positionAssets": "amount of debt to be covered by liquidator(msg.sender)."
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "redeem(uint256,address,address)": {
        "details": "Makes sure that the owner doesn't have shortfall after withdrawing.",
        "params": {
          "owner": "address which owns the smart pool assets.",
          "receiver": "address to which the assets will be transferred.",
          "shares": "amount of shares to be redeemed for underlying asset."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "repayAtMaturity(uint256,uint256,uint256,address)": {
        "params": {
          "borrower": "address of the account that has the debt.",
          "maturity": "maturity date where the assets will be repaid.",
          "maxAssetsAllowed": "maximum amount of debt that the user is willing to accept to be repaid.",
          "positionAssets": "amount to be paid for the borrower's debt."
        },
        "returns": {
          "actualRepayAssets": "the actual amount that was transferred into the protocol."
        }
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "seize(address,address,uint256)": {
        "details": "Public function for liquidator to seize borrowers tokens in the smart pool. This function will only be called from another FixedLender, on `liquidation` calls. That's why msg.sender needs to be passed to the private function (to be validated as a market)",
        "params": {
          "assets": "amount to be removed from borrower's possession.",
          "borrower": "address from which the tokens will be seized.",
          "liquidator": "address which will receive the seized tokens."
        }
      },
      "setAccumulatedEarningsSmoothFactor(uint128)": {
        "details": "Value can only be lower than 4. If set at 0, then all remaining accumulated earnings are distributed in following operation to the smart pool.",
        "params": {
          "accumulatedEarningsSmoothFactor_": "represented with 18 decimals."
        }
      },
      "setDampSpeed((uint256,uint256))": {
        "details": "Values can only be set between 0 and 100%.",
        "params": {
          "dampSpeed": "represented with 18 decimals."
        }
      },
      "setInterestRateModel(address)": {
        "params": {
          "interestRateModel_": "new interest rate model."
        }
      },
      "setMaxFuturePools(uint8)": {
        "details": "Value can not be 0 or higher than 224. Value shouldn't be lower than previous value or VALID maturities will become NOT_READY.",
        "params": {
          "futurePools": "number of pools to be active at the same time."
        }
      },
      "setPenaltyRate(uint256)": {
        "details": "Value can only be set approximately between 5% and 1% daily.",
        "params": {
          "penaltyRate_": "percentage represented with 18 decimals."
        }
      },
      "setSmartPoolReserveFactor(uint256)": {
        "details": "Value can only be set between 20% and 0%.",
        "params": {
          "smartPoolReserveFactor_": "parameter represented with 18 decimals."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "totalAssets()": {
        "returns": {
          "_0": "actual smartPoolAssets plus earnings to be accrued at current timestamp."
        }
      },
      "transfer(address,uint256)": {
        "details": "It's expected that this function can't be paused to prevent freezing user funds. Makes sure that the caller doesn't have shortfall after transferring.",
        "params": {
          "shares": "amount of tokens.",
          "to": "address to which the tokens will be transferred."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "It's expected that this function can't be paused to prevent freezing user funds. Makes sure that `from` address doesn't have shortfall after transferring.",
        "params": {
          "from": "address from which the tokens will be transferred.",
          "shares": "amount of tokens.",
          "to": "address to which the tokens will be transferred."
        }
      },
      "withdraw(uint256,address,address)": {
        "details": "Makes sure that the owner doesn't have shortfall after withdrawing.",
        "params": {
          "assets": "amount of underlying to be withdrawn.",
          "owner": "address which owns the smart pool assets.",
          "receiver": "address to which the assets will be transferred."
        }
      },
      "withdrawAtMaturity(uint256,uint256,uint256,address,address)": {
        "details": "It's expected that this function can't be paused to prevent freezing user funds.",
        "params": {
          "maturity": "maturity date where the assets will be withdrawn.",
          "minAssetsRequired": "minimum amount required by the user (if discount included for early withdrawal).",
          "owner": "address that previously deposited the assets.",
          "positionAssets": "the amount of assets (principal + fee) to be withdrawn.",
          "receiver": "address that will receive the withdrawn assets."
        },
        "returns": {
          "assetsDiscounted": "amount of assets withdrawn (can include a discount for early withdraw)."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "AccumulatedEarningsSmoothFactorSet(uint128)": {
        "notice": "Event emitted when the accumulatedEarningsSmoothFactor is changed by admin."
      },
      "AssetSeized(address,address,uint256)": {
        "notice": "Event emitted when a user's collateral has been seized."
      },
      "BorrowAtMaturity(uint256,address,address,address,uint256,uint256)": {
        "notice": "Event emitted when a user borrows amount of an asset from a certain maturity date."
      },
      "DampSpeedSet(uint256,uint256)": {
        "notice": "emitted when the damp speeds are changed by admin."
      },
      "DepositAtMaturity(uint256,address,address,uint256,uint256)": {
        "notice": "Event emitted when a user deposits an amount of an asset to a certain maturity date collecting a fee at the end of the period."
      },
      "InterestRateModelSet(address)": {
        "notice": "emitted when the interestRateModel is changed by admin."
      },
      "LiquidateBorrow(address,address,uint256,address,uint256)": {
        "notice": "Event emitted when a user's position had a liquidation."
      },
      "MaxFuturePoolsSet(uint256)": {
        "notice": "Event emitted when the maxFuturePools is changed by admin."
      },
      "PenaltyRateSet(uint256)": {
        "notice": "emitted when the penaltyRate is changed by admin."
      },
      "RepayAtMaturity(uint256,address,address,uint256,uint256)": {
        "notice": "Event emitted when a user repays its borrows after maturity."
      },
      "SmartPoolEarningsAccrued(uint256,uint256)": {
        "notice": "Event emitted when earnings are accrued to the smart pool."
      },
      "SmartPoolReserveFactorSet(uint256)": {
        "notice": "emitted when the smartPoolReserveFactor is changed by admin."
      },
      "WithdrawAtMaturity(uint256,address,address,address,uint256,uint256)": {
        "notice": "Event emitted when a user collects its deposits after maturity."
      }
    },
    "kind": "user",
    "methods": {
      "depositAtMaturity(uint256,uint256,uint256,address)": {
        "notice": "Deposits a certain amount to a maturity."
      },
      "getAccountSnapshot(address,uint256)": {
        "notice": "Gets current snapshot for a wallet in certain maturity."
      },
      "liquidate(address,uint256,uint256,address)": {
        "notice": "Liquidates uncollaterized position(s)."
      },
      "pause()": {
        "notice": "Sets the _pause state to true in case of emergency, triggered by an authorized account."
      },
      "redeem(uint256,address,address)": {
        "notice": "Redeems the owner's smart pool assets to the receiver address."
      },
      "repayAtMaturity(uint256,uint256,uint256,address)": {
        "notice": "Repays a certain amount to a maturity."
      },
      "seize(address,address,uint256)": {
        "notice": "Public function to seize a certain amount of tokens."
      },
      "setAccumulatedEarningsSmoothFactor(uint128)": {
        "notice": "Sets the factor used when smoothly accruing earnings to the smart pool."
      },
      "setDampSpeed((uint256,uint256))": {
        "notice": "Sets the damp speed used to update the smartPoolAssetsAverage."
      },
      "setInterestRateModel(address)": {
        "notice": "Sets the interest rate model to be used by this PoolAccounting."
      },
      "setMaxFuturePools(uint8)": {
        "notice": "Sets the protocol's max future pools for borrowing and lending."
      },
      "setPenaltyRate(uint256)": {
        "notice": "Sets the penalty rate per second."
      },
      "setSmartPoolReserveFactor(uint256)": {
        "notice": "Sets the percentage that represents the smart pool liquidity reserves that can't be borrowed."
      },
      "totalAssets()": {
        "notice": "Calculates the smart pool balance plus earnings to be accrued at current timestamp from maturities and accumulator."
      },
      "transfer(address,uint256)": {
        "notice": "Moves amount of shares from the caller's account to `to`."
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Moves amount of shares from `from` to `to` using the allowance mechanism."
      },
      "unpause()": {
        "notice": "Sets the _pause state to false when threat is gone, triggered by an authorized account."
      },
      "withdraw(uint256,address,address)": {
        "notice": "Withdraws the owner's smart pool assets to the receiver address."
      },
      "withdrawAtMaturity(uint256,uint256,uint256,address,address)": {
        "notice": "Withdraws a certain amount from a maturity."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2420,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 2422,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2426,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2430,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "balanceOf",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2436,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "allowance",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2444,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "nonces",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 70,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "_roles",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)65_storage)"
      },
      {
        "astId": 6767,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "mpUserSuppliedAmount",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(Position)9398_storage))"
      },
      {
        "astId": 6774,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "mpUserBorrowedAmount",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(Position)9398_storage))"
      },
      {
        "astId": 6778,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "userMpBorrowed",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6782,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "userMpSupplied",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6787,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "maturityPools",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(MaturityPool)9393_storage)"
      },
      {
        "astId": 6789,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "smartPoolBorrowed",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 6791,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "smartPoolEarningsAccumulator",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 6793,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "smartPoolAssetsAverage",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 6795,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "lastAverageUpdate",
        "offset": 0,
        "slot": "15",
        "type": "t_uint32"
      },
      {
        "astId": 6798,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "interestRateModel",
        "offset": 4,
        "slot": "15",
        "type": "t_contract(InterestRateModel)6704"
      },
      {
        "astId": 6800,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "penaltyRate",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 6802,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "smartPoolReserveFactor",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 6804,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "dampSpeedUp",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 6806,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "dampSpeedDown",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 3451,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "locked",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 1348,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "_paused",
        "offset": 0,
        "slot": "21",
        "type": "t_bool"
      },
      {
        "astId": 4677,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "maxFuturePools",
        "offset": 1,
        "slot": "21",
        "type": "t_uint8"
      },
      {
        "astId": 4679,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "lastAccumulatedEarningsAccrual",
        "offset": 2,
        "slot": "21",
        "type": "t_uint32"
      },
      {
        "astId": 4681,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "accumulatedEarningsSmoothFactor",
        "offset": 6,
        "slot": "21",
        "type": "t_uint128"
      },
      {
        "astId": 4683,
        "contract": "contracts/FixedLender.sol:FixedLender",
        "label": "smartPoolAssets",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(InterestRateModel)6704": {
        "encoding": "inplace",
        "label": "contract InterestRateModel",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Position)9398_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PoolLib.Position)",
        "numberOfBytes": "32",
        "value": "t_struct(Position)9398_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)65_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)65_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(Position)9398_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct PoolLib.Position))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Position)9398_storage)"
      },
      "t_mapping(t_uint256,t_struct(MaturityPool)9393_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct PoolLib.MaturityPool)",
        "numberOfBytes": "32",
        "value": "t_struct(MaturityPool)9393_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(MaturityPool)9393_storage": {
        "encoding": "inplace",
        "label": "struct PoolLib.MaturityPool",
        "members": [
          {
            "astId": 9386,
            "contract": "contracts/FixedLender.sol:FixedLender",
            "label": "borrowed",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9388,
            "contract": "contracts/FixedLender.sol:FixedLender",
            "label": "supplied",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9390,
            "contract": "contracts/FixedLender.sol:FixedLender",
            "label": "earningsUnassigned",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9392,
            "contract": "contracts/FixedLender.sol:FixedLender",
            "label": "lastAccrual",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Position)9398_storage": {
        "encoding": "inplace",
        "label": "struct PoolLib.Position",
        "members": [
          {
            "astId": 9395,
            "contract": "contracts/FixedLender.sol:FixedLender",
            "label": "principal",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9397,
            "contract": "contracts/FixedLender.sol:FixedLender",
            "label": "fee",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)65_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 62,
            "contract": "contracts/FixedLender.sol:FixedLender",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 64,
            "contract": "contracts/FixedLender.sol:FixedLender",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}